# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 1
par_ROPE$ROPE_upper[idx] = tp[idx] + 1
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
par_ROPE
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8)
rvalues = c(0.05,0.05,0.1,0.15,0.2)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 1
par_ROPE$ROPE_upper[idx] = tp[idx] + 1
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
par_ROPE
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8)
rvalues = c(0.05,0.05,0.1,0.15,0.2,0.4)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 1
par_ROPE$ROPE_upper[idx] = tp[idx] + 1
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
par_ROPE
tp
cbind(tp, par_ROPE)
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8)
rvalues = c(0.05,0.05,0.1,0.15,0.2,0.4,0.6)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 1
par_ROPE$ROPE_upper[idx] = tp[idx] + 1
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
cbind(tp, par_ROPE)
rope_val > cuts[length(cuts)]
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8)
rvalues = c(0.05,0.05,0.1,0.15,0.2)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 0.6
par_ROPE$ROPE_upper[idx] = tp[idx] + 0.6
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
cbind(tp, par_ROPE)
rope_val > cuts[length(cuts)]
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8,1.2,2)
rvalues = c(0.05,0.05,0.1,0.15,0.2,0.4)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 0.6
par_ROPE$ROPE_upper[idx] = tp[idx] + 0.6
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
cbind(tp, par_ROPE)
rope_val > cuts[length(cuts)]
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8,1.2,2)
rvalues = c(0.05,0.05,0.1,0.15,0.2)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 0.6
par_ROPE$ROPE_upper[idx] = tp[idx] + 0.6
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
cbind(tp, par_ROPE)
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8,1.2,2)
rvalues = c(0.05,0.05,0.1,0.15,0.2,0.4)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 0.6
par_ROPE$ROPE_upper[idx] = tp[idx] + 0.6
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
cbind(tp, par_ROPE)
rope_val
cuts[length(cuts)]
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8,1.2)
rvalues = c(0.05,0.05,0.1,0.15,0.2,0.4)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 0.6
par_ROPE$ROPE_upper[idx] = tp[idx] + 0.6
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
cbind(tp, par_ROPE)
# test
tp = c(0,0.1,0.2,0.5,0.8,1.2,2)
cuts = c(0,0.1,0.2,0.5,0.8,1.2)
rvalues = c(0.05,0.05,0.1,0.15,0.2,0.3)
# storage
par_ROPE = data.frame(ROPE_lower=tp,
ROPE_upper=tp,
ROPE_prec=0)
# ROPE
rope_val = abs(tp)
# cuts==0
idx = rope_val==cuts[1]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[1]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[1]
# other cuts
for( j in 2:length(cuts)){
idx = rope_val > cuts[j-1] & rope_val <= cuts[j]
par_ROPE$ROPE_lower[idx] = tp[idx] - rvalues[j]
par_ROPE$ROPE_upper[idx] = tp[idx] + rvalues[j]
}
# final cut
idx = rope_val > cuts[length(cuts)]
par_ROPE$ROPE_lower[idx] = tp[idx] - 0.6
par_ROPE$ROPE_upper[idx] = tp[idx] + 0.6
# precision
par_ROPE$ROPE_prec = with(par_ROPE, ROPE_upper-ROPE_lower)
cbind(tp, par_ROPE)
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','BradleyTerry2','brms','bayesplot','posterior','rethinking','loo')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
write.csv(
param_true, row.names=F,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('3_2 CBTL summaries: true parameter extraction complete')
### parameter recovery ####
rm(list='comparison_fit')
comparison_data2 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data2.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
judge_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_judge_fit.RDS' ) )
individual_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_individual_fit.RDS' ) )
param_CBTL = CBTL_parameter_recovery(
observed_data = comparison_data2,
stimuli_model = comparison_fit,
individual_model = individual_fit,
judge_model = judge_fit,
true_parameters = param_true,
par_int = c('b_XIc','b_XId','b_ZJd','sd','sigma','r_Is','r_Js') )
write.csv(
param_CBTL, row.names=F,
file=file.path( dir,'3_results','CBTL_analysis','summaries','3_2_CBTL_estimated_parameter.csv' ) )
print('3_2 CBTL summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_1_1_ITCJ_model.stan"
fit = readRDS(
file = file.path(
dir,'3_results','ITCJ_analysis','fit', str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_1_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('sA','TIA') )
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_1_2_ITCJ_estimated_parameter.csv' ) )
print('4_1_2 ITCJ summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_2_1_ITCJ_model.stan"
fit = readRDS(
file = file.path(
dir,'3_results','ITCJ_analysis','fit', str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_2_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('sA','TI','TIA') )
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_2_2_ITCJ_estimated_parameter.csv' ) )
print('4_2_2 ITCJ summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_3_1_ITCJ_model.stan"
fit = readRDS(
file = file.path(
dir,'3_results','ITCJ_analysis','fit', str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_3_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','sA','TI','TIA') )
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_3_2_ITCJ_estimated_parameter.csv' ) )
print('4_3_2 ITCJ summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_4_1_ITCJ_model.stan"
fit = readRDS(
file = file.path(
dir,'3_results','ITCJ_analysis','fit', str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_4_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('sA','TI','TIA','BJ') )
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_4_2_ITCJ_estimated_parameter.csv' ) )
print('4_4_2 ITCJ summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_5_1_ITCJ_model.stan"
fit = readRDS(  file = file.path( dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_5_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','sA','TI','TIA','BJ') )
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_5_2_ITCJ_estimated_parameter.csv' ) )
print('4_5_2 ITCJ summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_6_1_ITCJ_model.stan"
fit = readRDS(  file = file.path( dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_6_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','^sA','^sI','^sJ','TI','TIA','BJ') )
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_6_2_ITCJ_estimated_parameter.csv' ) )
print('4_6_2 ITCJ summaries: estimated parameter extraction complete')
