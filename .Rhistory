colrs = c("blue", "red")[ V(network_judges2individuals)$type + 1 ]
V(network_judges2individuals)$color = colrs
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max(E(network_judges2individuals)$weight)
par(mar=c(0,0,0,0))
plot( network_judges2individuals, axes=F, asp=0, xlim=c(-1.1,1), layout=layout_as_bipartire )
V(network_judges2individuals)$size = 2.5
V(network_judges2individuals)$label.cex = 0.8
V(network_judges2individuals)$label.degree = 0
colrs = c("blue", "red")[ V(network_judges2individuals)$type + 1 ]
V(network_judges2individuals)$color = colrs
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max(E(network_judges2individuals)$weight)
par(mar=c(0,0,0,0))
plot( network_judges2individuals, axes=F, asp=0, xlim=c(-1.1,1), layout=layout_as_bipartite )
text( x=-1.1, y=-1, 'individuals' )
text( x=-1.1, y=1, 'judges' )
par(mar=old_par$mar)
# all connections
incidence_judges2individuals = data.frame(incidence_judges2individuals)
incidence_judges2individuals[ incidence_judges2individuals$Freq == 0, ]
adjacency_individuals = data.frame(adjacency_individuals)
adjacency_individuals = data.frame(adjacency_individuals)
adjacency_individuals
adjacency_individuals = data.frame( as.matrix( adjacency_individuals ) )
adjacency_individuals
adjacency_individuals = data.frame( matrix( adjacency_individuals ) )
adjacency_individuals
adjacency_individuals
adjacency_individuals = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$Is1,
idx2 = comparison_data$d_obs$Is2
)
adjacency_individuals
N_items = max( unique( unlist( comparison_data$d_obs[,c('Is1','Is2')] ) ) )
adjacency_individuals = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$Is1,
idx2 = comparison_data$d_obs$Is2
)
adjacency_individuals
str(adjacency_individuals)
### comparison counts  ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
### adjacency matrix ####
stimuli = comparison_data$d_obs[,c('Is1','As1')]
names(stimuli) = c('Is','As')
dmom = comparison_data$d_obs[,c('Is2','As2')]
names(dmom) = c('Is','As')
stimuli = rbind(stimuli, dmom)
stimuli = stimuli[ with(stimuli, order(Is,As) ), ]
stimuli = paste0('[', apply( stimuli[,c('Is','As')], 1, paste, collapse=', ' ), ']')
stimuli = unique(stimuli)
stimuli = data.frame(stimuli, idx=1:length(stimuli) )
# adjacency comparison
comparison_data$d_obs$left = paste0(
'[', apply( comparison_data$d_obs[,c('Is1','As1')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$left_idx = match( comparison_data$d_obs$left, stimuli$stimuli )
comparison_data$d_obs$right = paste0(
'[', apply( comparison_data$d_obs[,c('Is2','As2')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$right_idx = match( comparison_data$d_obs$right, stimuli$stimuli )
# comparison_data$d_obs[,c('left','right','left_idx','right_idx')]
N_items = max( stimuli$idx )
adjacency_stimuli = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$left_idx,
idx2 = comparison_data$d_obs$right_idx
)
rownames(adjacency_stimuli) = colnames(adjacency_stimuli) = stimuli$stimuli
# table(adjacency_stimuli)
network_stimuli = graph_from_adjacency_matrix( adjacency_stimuli,
mode = "undirected",
weighted = T)
degree(network_stimuli, mode='in') # in-degree, number of edges pointing towards vertex)
degree(network_stimuli, mode='out') # out-degree, number of edges originating from the vertex
V(network_stimuli)$size = 0.8
V(network_stimuli)$label.cex = 0.3
V(network_stimuli)$label.degree = 0
E(network_stimuli)$width = E(network_stimuli)$weight-0.8
par(mar=c(0,0,0,0))
plot( network_stimuli, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
par(mar=old_par$mar)
count_individuals
rownames(adjacency_individuals) = colnames(adjacency_individuals) = rownames(count_individuals)
adjacency_individuals
network_individuals = graph_from_adjacency_matrix(
adjacency_individuals,
mode = "undirected",
weighted = T
)
network_individuals = graph_from_adjacency_matrix(
adjacency_individuals,
mode = "undirected",
weighted = T
)
degree(network_individuals, mode='in') # in-degree, number of edges pointing towards vertex)
degree(network_individuals, mode='out') # out-degree, number of edges originating from the vertex
V(network_individuals)$size = 7
V(network_individuals)$label.cex = 0.5
V(network_individuals)$label.degree = 0
E(network_individuals)$width = E(network_individuals)$weight / max(E(network_individuals)$weight)
par(mar=c(0,0,0,0))
plot( network_individuals, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
par(mar=old_par$mar)
degree(network_individuals, mode='in') # in-degree, number of edges pointing towards vertex)
adjacency_individuals
components_individuals = compute_connected_components( adj= adjacency_individuals )
components_individuals
adjacency_individuals = data.frame( adjacency_individuals )
adjacency_individuals
adjacency_individuals = as.data.frame( adjacency_individuals )
adjacency_individuals
adjacency_individuals = data.frame( unlist(adjacency_individuals) )
adjacency_individuals
adjacency_individuals
N_items = max( unique( unlist( comparison_data$d_obs[,c('Is1','Is2')] ) ) )
adjacency_individuals = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$Is1,
idx2 = comparison_data$d_obs$Is2
)
rownames(adjacency_individuals) = colnames(adjacency_individuals) = rownames(count_individuals)
network_individuals = graph_from_adjacency_matrix(
adjacency_individuals,
mode = "undirected",
weighted = T
)
degree(network_individuals, mode='in') # in-degree, number of edges pointing towards vertex
degree(network_individuals, mode='out') # out-degree, number of edges originating from the vertex
V(network_individuals)$size = 7
V(network_individuals)$label.cex = 0.5
V(network_individuals)$label.degree = 0
E(network_individuals)$width = E(network_individuals)$weight / max(E(network_individuals)$weight)
par(mar=c(0,0,0,0))
plot( network_individuals, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
par(mar=old_par$mar)
components_individuals = compute_connected_components( adj= adjacency_individuals )
components_individuals
as.data.frame.table( adjacency_individuals )
# preliminar ####
rm(list=ls())
gc()
## package requirements ####
librerias = c('rethinking','rstan','coda','cmdstanr','posterior','bayesplot',
'stringr','tidyverse','rstan','runjags',
'BradleyTerry2','lme4','arm','igraph')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## loading functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
old_par = par()
# Load data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
# str(comparison_data)
# Design summaries ####
## stimuli ####
### comparison counts  ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
### adjacency matrix ####
stimuli = comparison_data$d_obs[,c('Is1','As1')]
names(stimuli) = c('Is','As')
dmom = comparison_data$d_obs[,c('Is2','As2')]
names(dmom) = c('Is','As')
stimuli = rbind(stimuli, dmom)
stimuli = stimuli[ with(stimuli, order(Is,As) ), ]
stimuli = paste0('[', apply( stimuli[,c('Is','As')], 1, paste, collapse=', ' ), ']')
stimuli = unique(stimuli)
stimuli = data.frame(stimuli, idx=1:length(stimuli) )
# adjacency comparison
comparison_data$d_obs$left = paste0(
'[', apply( comparison_data$d_obs[,c('Is1','As1')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$left_idx = match( comparison_data$d_obs$left, stimuli$stimuli )
comparison_data$d_obs$right = paste0(
'[', apply( comparison_data$d_obs[,c('Is2','As2')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$right_idx = match( comparison_data$d_obs$right, stimuli$stimuli )
# comparison_data$d_obs[,c('left','right','left_idx','right_idx')]
N_items = max( stimuli$idx )
adjacency_stimuli = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$left_idx,
idx2 = comparison_data$d_obs$right_idx
)
### comparisons design ####
network_stimuli = graph_from_adjacency_matrix( adjacency_stimuli,
mode = "undirected",
weighted = T)
degree(network_stimuli, mode='in') # in-degree, number of edges pointing towards vertex
degree(network_stimuli, mode='out') # out-degree, number of edges originating from the vertex
#
# similar to count_stimuli
V(network_stimuli)$size = 0.8
V(network_stimuli)$label.cex = 0.3
V(network_stimuli)$label.degree = 0
E(network_stimuli)$width = E(network_stimuli)$weight-0.8
par(mar=c(0,0,0,0))
plot( network_stimuli, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
par(mar=old_par$mar)
freq_stimuli = as.data.frame.table( adjacency_individuals )
# preliminar ####
rm(list=ls())
gc()
## package requirements ####
librerias = c('rethinking','rstan','coda','cmdstanr','posterior','bayesplot',
'stringr','tidyverse','rstan','runjags',
'BradleyTerry2','lme4','arm','igraph')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## loading functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
old_par = par()
# Load data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
# str(comparison_data)
# Design summaries ####
## stimuli ####
### comparison counts  ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
### adjacency matrix ####
stimuli = comparison_data$d_obs[,c('Is1','As1')]
names(stimuli) = c('Is','As')
dmom = comparison_data$d_obs[,c('Is2','As2')]
names(dmom) = c('Is','As')
stimuli = rbind(stimuli, dmom)
stimuli = stimuli[ with(stimuli, order(Is,As) ), ]
stimuli = paste0('[', apply( stimuli[,c('Is','As')], 1, paste, collapse=', ' ), ']')
stimuli = unique(stimuli)
stimuli = data.frame(stimuli, idx=1:length(stimuli) )
# adjacency comparison
comparison_data$d_obs$left = paste0(
'[', apply( comparison_data$d_obs[,c('Is1','As1')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$left_idx = match( comparison_data$d_obs$left, stimuli$stimuli )
comparison_data$d_obs$right = paste0(
'[', apply( comparison_data$d_obs[,c('Is2','As2')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$right_idx = match( comparison_data$d_obs$right, stimuli$stimuli )
# comparison_data$d_obs[,c('left','right','left_idx','right_idx')]
N_items = max( stimuli$idx )
adjacency_stimuli = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$left_idx,
idx2 = comparison_data$d_obs$right_idx
)
### comparisons design ####
network_stimuli = graph_from_adjacency_matrix( adjacency_stimuli,
mode = "undirected",
weighted = T)
degree(network_stimuli, mode='in') # in-degree, number of edges pointing towards vertex
degree(network_stimuli, mode='out') # out-degree, number of edges originating from the vertex
#
# similar to count_stimuli
V(network_stimuli)$size = 0.8
V(network_stimuli)$label.cex = 0.3
V(network_stimuli)$label.degree = 0
E(network_stimuli)$width = E(network_stimuli)$weight-0.8
par(mar=c(0,0,0,0))
plot( network_stimuli, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
par(mar=old_par$mar)
freq_stimuli = as.data.frame.table( adjacency_stimuli )
freq_stimuli
# preliminar ####
rm(list=ls())
gc()
## package requirements ####
librerias = c('rethinking','rstan','coda','cmdstanr','posterior','bayesplot',
'stringr','tidyverse','rstan','runjags',
'BradleyTerry2','lme4','arm','igraph')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## loading functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
old_par = par()
# Load data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
# str(comparison_data)
# Design summaries ####
## stimuli ####
### comparison counts  ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
### adjacency matrix ####
stimuli = comparison_data$d_obs[,c('Is1','As1')]
names(stimuli) = c('Is','As')
dmom = comparison_data$d_obs[,c('Is2','As2')]
names(dmom) = c('Is','As')
stimuli = rbind(stimuli, dmom)
stimuli = stimuli[ with(stimuli, order(Is,As) ), ]
stimuli = paste0('[', apply( stimuli[,c('Is','As')], 1, paste, collapse=', ' ), ']')
stimuli = unique(stimuli)
stimuli = data.frame(stimuli, idx=1:length(stimuli) )
# adjacency comparison
comparison_data$d_obs$left = paste0(
'[', apply( comparison_data$d_obs[,c('Is1','As1')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$left_idx = match( comparison_data$d_obs$left, stimuli$stimuli )
comparison_data$d_obs$right = paste0(
'[', apply( comparison_data$d_obs[,c('Is2','As2')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$right_idx = match( comparison_data$d_obs$right, stimuli$stimuli )
# comparison_data$d_obs[,c('left','right','left_idx','right_idx')]
N_items = max( stimuli$idx )
adjacency_stimuli = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$left_idx,
idx2 = comparison_data$d_obs$right_idx
)
### comparisons design ####
network_stimuli = graph_from_adjacency_matrix( adjacency_stimuli,
mode = "undirected",
weighted = T)
degree(network_stimuli, mode='in') # in-degree, number of edges pointing towards vertex
degree(network_stimuli, mode='out') # out-degree, number of edges originating from the vertex
#
# similar to count_stimuli
adjacency_stimuli
freq_stimuli = as.data.frame.table( adjacency_stimuli )
freq_stimuli
adjacency_stimuli
degree(network_stimuli, mode='in') # in-degree, number of edges pointing towards vertex
degree(network_stimuli, mode='out') # out-degree, number of edges originating from the vertex
adjacency_stimuli
as.data.frame( adjacency_stimuli )
freq_stimuli = as.data.frame.table( adjacency_stimuli )
freq_stimuli
rownames(adjacency_stimuli)
nrow(adjacency_stimuli)
freq_stimuli = as.data.frame.table( adjacency_stimuli, row.names=1:nrow(adjacency_stimuli)  )
freq_stimuli = as.data.frame.table( adjacency_stimuli, row.names=1:nrow(adjacency_stimuli) )
freq_stimuli = as.data.frame.table( adjacency_stimuli )
freq_stimuli
rownames(adjacency_stimuli) = colnames(adjacency_stimuli) = stimuli$stimuli
freq_stimuli = as.data.frame.table( adjacency_stimuli )
freq_stimuli
freq_stimuli[ freq_stimuli$Freq>0, ]
count_individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'individual'
)
count_individuals
### adjacency matrix ####
N_items = max( unique( unlist( comparison_data$d_obs[,c('Is1','Is2')] ) ) )
adjacency_individuals = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$Is1,
idx2 = comparison_data$d_obs$Is2
)
### comparisons design ####
network_individuals = graph_from_adjacency_matrix(
adjacency_individuals,
mode = "undirected",
weighted = T
)
degree(network_individuals, mode='in') # in-degree, number of edges pointing towards vertex
degree(network_individuals, mode='out') # out-degree, number of edges originating from the vertex
V(network_individuals)$size = 7
V(network_individuals)$label.cex = 0.5
V(network_individuals)$label.degree = 0
E(network_individuals)$width = E(network_individuals)$weight / max(E(network_individuals)$weight)
par(mar=c(0,0,0,0))
plot( network_individuals, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
par(mar=old_par$mar)
components_individuals = compute_connected_components( adj= adjacency_individuals )
components_individuals
1:nrow(adjacency_individuals)
rownames(adjacency_individuals) = colnames(adjacency_individuals) = 1:nrow(adjacency_individuals)
freq_individuals = as.data.frame.table( adjacency_individuals )
freq_individuals
freq_individuals[ freq_individuals$Freq < 0, ] # connected nodes (stimuli)
freq_stimuli[ freq_stimuli$Freq < 0, ] # unconnected nodes (stimuli)
rownames(adjacency_stimuli) = colnames(adjacency_stimuli) = stimuli$stimuli
freq_stimuli = as.data.frame.table( adjacency_stimuli )
freq_stimuli[ freq_stimuli$Freq < 0, ] # unconnected nodes (stimuli)
freq_stimuli = as.data.frame.table( adjacency_stimuli )
freq_stimuli
freq_stimuli$Freq < 0
freq_stimuli[ freq_stimuli$Freq = 0, ] # unconnected nodes (stimuli)
freq_stimuli[ freq_stimuli$Freq == 0, ] # unconnected nodes (stimuli)
freq_individuals[ freq_individuals$Freq < 0, ] # connected nodes (stimuli)
freq_individuals[ freq_individuals$Freq == 0, ] # connected nodes (stimuli)
rownames(adjacency_individuals) = colnames(adjacency_individuals) = 1:nrow(adjacency_individuals)
freq_individuals = as.data.frame.table( adjacency_individuals )
freq_individuals[ freq_individuals$Freq == 0, ] # connected nodes (stimuli)
count_judges2individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'judges2individuals'
)
count_judges2individuals
min(count_judges2individuals); max(count_judges2individuals)
rowSums(count_judges2individuals)
incidence_judges2individuals = as.matrix(count_judges2individuals)
network_judges2individuals = graph_from_biadjacency_matrix(
incidence_judges2individuals,
mode = "out",
weighted = T
)
V(network_judges2individuals)$size = 2.5
V(network_judges2individuals)$label.cex = 0.8
V(network_judges2individuals)$label.degree = 0
colrs = c("blue", "red")[ V(network_judges2individuals)$type + 1 ]
V(network_judges2individuals)$color = colrs
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max(E(network_judges2individuals)$weight)
par(mar=c(0,0,0,0))
plot( network_judges2individuals, axes=F, asp=0, xlim=c(-1.1,1), layout=layout_as_bipartite )
text( x=-1.1, y=-1, 'individuals' )
text( x=-1.1, y=1, 'judges' )
par(mar=old_par$mar)
degree(network_judges2individuals, mode='in') # in-degree, number of edges pointing towards vertex
degree(network_judges2individuals, mode='out') # out-degree, number of edges originating from the vertex
betweenness(network_judges2individuals)
edge_betweenness(network_judges2individuals)
betweenness(network_judges2individuals)
betweenness(network_individuals) # vertex shortest path
V(network_individuals)$size = 7
V(network_individuals)$label.cex = 0.5
V(network_individuals)$label.degree = 0
E(network_individuals)$width = betweenness(network_individuals) / max(betweenness(network_individuals))
betweenness(network_individuals)
betweenness(network_individuals)
max(betweenness(network_individuals))
betweenness(network_individuals) / max(betweenness(network_individuals))
E(network_individuals)$width = betweenness(network_individuals) / max(betweenness(network_individuals))
edge_betweenness(network_individuals) # edges shortest path
E(network_individuals)$width = edge_betweenness(network_individuals) / max(edge_betweenness(network_individuals))
V(network_individuals)$size = 7
V(network_individuals)$label.cex = 0.5
V(network_individuals)$label.degree = 0
E(network_individuals)$width = edge_betweenness(network_individuals) / max(edge_betweenness(network_individuals))
par(mar=c(0,0,0,0))
plot( network_individuals, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
V(network_individuals)$size = 7
V(network_individuals)$label.cex = 0.5
V(network_individuals)$label.degree = 0
E(network_individuals)$width = edge_betweenness(network_individuals) / max(edge_betweenness(network_individuals))
par(mar=c(0,0,0,0))
plot( network_individuals, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
edge_betweenness(network_individuals) / max(edge_betweenness(network_individuals))
E(network_individuals)$width = edge_betweenness(network_individuals) / max(edge_betweenness(network_individuals))
par(mar=c(0,0,0,0))
plot( network_individuals, axes=F, asp=0, xlim=c(-1,1), layout=layout_in_circle )
edge_betweenness(network_individuals) # edges shortest path
betweenness(network_individuals) # vertex shortest path
betweenness(network_stimuli) # vertex shortest path
edge_betweenness(network_stimuli) # edges shortest path
betweenness(network_judges2individuals) # vertex shortest path (centrality measure)
edge_betweenness(network_judges2individuals) # edges shortest path (centrality measure)
V(network_judges2individuals)$size = 2.5
V(network_judges2individuals)$label.cex = 0.8
V(network_judges2individuals)$label.degree = 0
colrs = c("blue", "red")[ V(network_judges2individuals)$type + 1 ]
V(network_judges2individuals)$color = colrs
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max(E(network_judges2individuals)$weight)
par(mar=c(0,0,0,0))
plot( network_judges2individuals, axes=F, asp=0, xlim=c(-1.1,1), layout=layout_as_bipartite )
text( x=-1.1, y=-1, 'individuals' )
text( x=-1.1, y=1, 'judges' )
par(mar=old_par$mar)
# all connections
incidence_judges2individuals = data.frame(incidence_judges2individuals)
incidence_judges2individuals[ incidence_judges2individuals$Freq == 0, ]
### outcome description ####
data_summary = summary_data( comp_data = comparison_data )
data_summary
with( data_summary,
{
plot( TI, p, pch=19, col=rgb(0,0,0,0.3),
xlim=c(min(TI)-0.2,max(TI)+0.2), ylim=c(0,1),
main='Win proportion per individual',
xlab='Trait', ylab='Win proportion')
for( i in 1:nrow(data_summary) ){
lines( x=rep(TI[i], 2), y=c(p[i]-s[i],p[i]+s[i]), col=rgb(0,0,0,0.3) )
}
}
)
# times an individual wins vs trait, per group
pg = unique(data_summary$XId)
pg = pg[order(pg)]
par(mfrow=c(1,3))
for( g in pg ){
with( data_summary[ data_summary$XId==g, ],
{
plot( TI, p, pch=19, col=rgb(0,0,0,0.3),
xlim=c(min(TI)-0.2,max(TI)+0.2), ylim=c(0,1),
main=paste0('Win proportion per individual\nGroup ', g),
xlab='Trait', ylab='Win Proportion')
for( i in 1:nrow(data_summary) ){
lines( x=rep(TI[i], 2), y=c(p[i]-s[i],p[i]+s[i]), col=rgb(0,0,0,0.3) )
}
}
)
}
par(mfrow=c(1,1))
