mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(60, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='3_2_judge_parameters_rank.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_acf( post, pars=par_int )
ggsave( filename='3_2_judge_parameters_acf.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='3_2_judge_parameters_area.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
# Intercept plots
idx = sample(unique(comparison_data2$Js),9) # random sample of intercepts
idx = idx[order(idx)]
par_int = paste0('r_Js[',idx,',Intercept]')
mcmc_trace( judge_fit, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='3_2_judge_intercept_trace.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(60, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='3_2_judge_intercept_rank.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_acf( post, pars=par_int )
ggsave( filename='3_2_judge_intercept_acf.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='3_2_judge_intercept_area.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
## Individual analysis ####
individual_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_individual_fit.RDS' ) )
# posterior draws
post = as_draws_df( individual_fit )
# str(post)
# Parameter plots
par_int = c('b_XIc','b_XId1','b_XId2','b_XId3',
'sd_Is__Intercept','sigma')
mcmc_trace( individual_fit, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='3_2_individual_parameters_trace.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='3_2_individual_parameters_rank.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_acf( post, pars=par_int )
ggsave( filename='3_2_individual_parameters_acf.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='3_2_individual_parameters_area.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
# Intercept plots
idx = sample(unique(comparison_data2$Is2),9) # random sample of intercepts
idx = idx[order(idx)]
par_int = paste0('r_Is[',idx,',Intercept]')
mcmc_trace( individual_fit, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='3_2_individual_intercept_trace.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='3_2_individual_intercept_rank.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_acf( post, pars=par_int )
ggsave( filename='3_2_individual_intercept_acf.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='3_2_individual_intercept_area.png',
width=20, height=15, units='cm',
path =file.path( dir,'3_results','CBTL_analysis','figures' )  )
print('3_2 CBTL summaries: Stationarity, convergence, and mixing analysis complete')
# Parameter recovery ####
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
write.csv(
param_true, row.names=F,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('3_2 CBTL summaries: true parameter extraction complete')
## first estimation ####
comparison_data = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data1.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit1.Rdata' ) )
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 10 )
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 2 )
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 40 )
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 15 )
stimuli_trait
# test
comparison_data
BTm_object = comparison_fit
true_parameters = param_true
misfit_index=NULL
thr = 10
# function
stimuli_estimated_trait = model_dframe(
observed_data=comparison_data,
BTm_object=BTm_object,
type='stimulus' )
stimuli_estimated_trait$name = paste0('T',stimuli_estimated_trait$name)
stimuli_trait = merge( stimuli_estimated_trait, true_parameters,
by.x='name', by.y='variable', all.x=T )
stimuli_trait = stimuli_trait[!is.na(stimuli_trait$ability),]
stimuli_trait$CI_lower = with(stimuli_trait, ability+qnorm(0.025)*s.e.)
stimuli_trait$CI_upper = with(stimuli_trait, ability+qnorm(1-0.025)*s.e.)
stimuli_trait$extreme = with(stimuli_trait, abs(ability) >= thr )
if( !is.null(misfit_index) ){
stimuli_trait$misfit = stimuli_trait$name %in% misfit_index
}
stimuli_trait
#' @param comparison_data
#' @param BTm_object
#' @param true_parameters
#' @param misfit_index
#' @param thr exclusion threshold
#'
#' @return plot
#' @export
#'
#' @examples
stimuli_trait_comparison_plot = function( comparison_data,
BTm_object,
true_parameters,
misfit_index=NULL,
thr = 10){
# # test
# comparison_data
# BTm_object = comparison_fit
# true_parameters = param_true
# misfit_index=NULL
# thr = 10
# function
stimuli_estimated_trait = model_dframe(
observed_data=comparison_data,
BTm_object=BTm_object,
type='stimulus' )
stimuli_estimated_trait$name = paste0('T',stimuli_estimated_trait$name)
stimuli_trait = merge( stimuli_estimated_trait, true_parameters,
by.x='name', by.y='variable', all.x=T )
stimuli_trait = stimuli_trait[!is.na(stimuli_trait$ability),]
stimuli_trait$CI_lower = with(stimuli_trait, ability+qnorm(0.025)*s.e.)
stimuli_trait$CI_upper = with(stimuli_trait, ability+qnorm(1-0.025)*s.e.)
stimuli_trait$extreme = with(stimuli_trait, abs(ability) >= thr )
if( !is.null(misfit_index) ){
stimuli_trait$misfit = stimuli_trait$name %in% misfit_index
}
# plot
par(mfrow=c(2,1))
with( stimuli_trait,
{
plot(value, ability, pch=19, col=rgb(0,0,0,0.3),
ylim=c(min(ability), max(ability)),
xlab='True stimuli trait', ylab='Estimated stimuli trait')
if( !is.null(misfit_index) ){
points( value[misfit==T], ability[misfit==T], pch=19, col=rgb(1,0,0,1) )
}
sapply( 1:nrow(stimuli_trait),
function(i){ lines( x=rep(value[i],2), y=c(CI_lower[i],CI_upper[i]),
lwd=0.5, col=rgb(0,0,0,0.4) ) } )
abline( h=0, lty=2)
abline( lm(ability~value), lty=1, lwd=2, col=rgb(0,0,1,0.4) )
legend('topleft', legend=c('95% CI','regression line'), bty='n',
lty=c(1,1), lwd=c(0.5,2), col=c(rgb(0,0,0,0.4),rgb(0,0,1,0.4)))
if( !is.null(misfit_index) ){
legend('topright', legend=c('Non-misfits','Misfits'), bty='n',
pch=c(19,19), col=c(rgb(0,0,0,0.4),rgb(1,0,0,1)))
}
}
)
with( stimuli_trait[ stimuli_trait$extreme==F,],
{
plot(value, ability, pch=19, col=rgb(0,0,0,0.3),
ylim=c(min(CI_lower), max(CI_upper)),
xlab='True stimuli trait', ylab='Estimated stimuli trait')
if( !is.null(misfit_index) ){
points( value[misfit==T], ability[misfit==T], pch=19, col=rgb(1,0,0,1) )
}
sapply( 1:nrow(stimuli_trait),
function(i){ lines( x=rep(value[i],2), y=c(CI_lower[i],CI_upper[i]),
lwd=0.5, col=rgb(0,0,0,0.4) ) } )
abline( h=0, lty=2)
abline( lm(ability~value), lty=1, lwd=2, col=rgb(0,0,1,0.4) )
}
)
par(mfrow=c(1,1))
}
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 10 )
#' @param comparison_data
#' @param BTm_object
#' @param true_parameters
#' @param misfit_index
#' @param thr exclusion threshold
#'
#' @return plot
#' @export
#'
#' @examples
stimuli_trait_comparison_plot = function( comparison_data,
BTm_object,
true_parameters,
misfit_index=NULL,
thr = 10){
# # test
# comparison_data
# BTm_object = comparison_fit
# true_parameters = param_true
# misfit_index=NULL
# thr = 10
# function
stimuli_estimated_trait = model_dframe(
observed_data=comparison_data,
BTm_object=BTm_object,
type='stimulus' )
stimuli_estimated_trait$name = paste0('T',stimuli_estimated_trait$name)
stimuli_trait = merge( stimuli_estimated_trait, true_parameters,
by.x='name', by.y='variable', all.x=T )
stimuli_trait = stimuli_trait[!is.na(stimuli_trait$ability),]
stimuli_trait$CI_lower = with(stimuli_trait, ability+qnorm(0.025)*s.e.)
stimuli_trait$CI_upper = with(stimuli_trait, ability+qnorm(1-0.025)*s.e.)
stimuli_trait$extreme = with(stimuli_trait, abs(ability) >= thr )
if( !is.null(misfit_index) ){
stimuli_trait$misfit = stimuli_trait$name %in% misfit_index
}
# plot
par(mfrow=c(1,2))
with( stimuli_trait,
{
plot(value, ability, pch=19, col=rgb(0,0,0,0.3),
ylim=c(min(ability), max(ability)),
xlab='True stimuli trait', ylab='Estimated stimuli trait')
if( !is.null(misfit_index) ){
points( value[misfit==T], ability[misfit==T], pch=19, col=rgb(1,0,0,1) )
}
sapply( 1:nrow(stimuli_trait),
function(i){ lines( x=rep(value[i],2), y=c(CI_lower[i],CI_upper[i]),
lwd=0.5, col=rgb(0,0,0,0.4) ) } )
abline( h=0, lty=2)
abline( lm(ability~value), lty=1, lwd=2, col=rgb(0,0,1,0.4) )
legend('topleft', legend=c('95% CI','regression line'), bty='n',
lty=c(1,1), lwd=c(0.5,2), col=c(rgb(0,0,0,0.4),rgb(0,0,1,0.4)))
if( !is.null(misfit_index) ){
legend('topright', legend=c('Non-misfits','Misfits'), bty='n',
pch=c(19,19), col=c(rgb(0,0,0,0.4),rgb(1,0,0,1)))
}
}
)
with( stimuli_trait[ stimuli_trait$extreme==F,],
{
plot(value, ability, pch=19, col=rgb(0,0,0,0.3),
ylim=c(min(CI_lower), max(CI_upper)),
xlab='True stimuli trait', ylab='Estimated stimuli trait')
if( !is.null(misfit_index) ){
points( value[misfit==T], ability[misfit==T], pch=19, col=rgb(1,0,0,1) )
}
sapply( 1:nrow(stimuli_trait),
function(i){ lines( x=rep(value[i],2), y=c(CI_lower[i],CI_upper[i]),
lwd=0.5, col=rgb(0,0,0,0.4) ) } )
abline( h=0, lty=2)
abline( lm(ability~value), lty=1, lwd=2, col=rgb(0,0,1,0.4) )
}
)
par(mfrow=c(1,1))
}
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 10 )
png(file=file.path( dir,'3_results','CBTL_analysis','figures','3_2_CBTL_stimuli_trait_comparison_plot1_1.png' ),
width=25, height=15, units='cm', res=200)
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 10 )
dev.off()
png(file=file.path( dir,'3_results','CBTL_analysis','figures','3_2_CBTL_stimuli_trait_comparison_plot1_1.png' ),
width=25, height=10, units='cm', res=200)
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 10 )
dev.off()
png(file=file.path( dir,'3_results','CBTL_analysis','figures','3_2_CBTL_stimuli_trait_comparison_plot1_1.png' ),
width=25, height=15, units='cm', res=200)
stimuli_trait_comparison_plot(
comparison_data=comparison_data,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 10 )
dev.off()
### misfit analysis ####
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
judges_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_judges_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx1 = d$name %in% with(stimuli_misfit, idx[misfit==T])
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95)), ]
### misfit analysis ####
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
judges_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_judges_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
comparison_fit
comparison_data$d_obs
## first estimation ####
comparison_data2 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data1.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit1.Rdata' ) )
stimuli_trait_comparison_plot(
comparison_data=comparison_data2,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=NULL,
thr = 10 )
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
### misfit analysis ####
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
judges_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_judges_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx1 = d$name %in% with(stimuli_misfit, idx[misfit==T])
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95)), ]
## second estimation ####
rm(list='comparison_fit')
comparison_data2 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data2.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
judge_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_judge_fit.RDS' ) )
individual_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_individual_fit.RDS' ) )
param_CBTL = CBTL_parameter_recovery(
comparison_data = comparison_data2,
stimuli_model = comparison_fit,
individual_model = individual_fit,
judge_model = judge_fit,
true_parameters = param_true,
par_int = c('b_XIc','b_XId','b_ZJd','sd','sigma','r_Is','r_Js') )
parameter_recovery_plot( parameter_summary_data=param_CBTL, thr=500 )
parameter_recovery_plot( parameter_summary_data=param_CBTL, thr=10 )
parameter_recovery_plot( parameter_summary_data=param_CBTL, thr=10 )
parameter_rmse_plot( parameter_summary_data=param_CBTL, thr=500 )
parameter_rmse_plot( parameter_summary_data=param_CBTL, thr=10 )
parameter_neff_plot( parameter_summary_data=param_CBTL, thr=500 )
parameter_neff_plot( parameter_summary_data=param_CBTL, thr=10 )
## judges ####
d = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_judge_data.csv' ) )
influential_points_plot( fit_data=d, fit_model=judge_fit )
stimuli_trait_comparison_plot(
comparison_data=comparison_data1,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=with(stimuli_misfit, idx[misfit==T]),
thr = 10 )
## first estimation ####
comparison_data1 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data1.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit1.Rdata' ) )
stimuli_trait_comparison_plot(
comparison_data=comparison_data1,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=with(stimuli_misfit, idx[misfit==T]),
thr = 10 )
### misfit analysis ####
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
judges_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_judges_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx1 = d$name %in% with(stimuli_misfit, idx[misfit==T])
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95)), ]
stimuli_trait_comparison_plot(
comparison_data=comparison_data1,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index=with(stimuli_misfit, idx[misfit==T]),
thr = 10 )
stimuli_misfit
with(stimuli_misfit, idx[misfit==T]
)
stimuli_trait
misfit_index
with(stimuli_misfit, idx[misfit==T])
with(stimuli_misfit, idx[misfit==T])
stimuli_misfit
stimuli_trait_comparison_plot(
comparison_data=comparison_data1,
BTm_object=comparison_fit,
true_parameters = param_true,
misfit_index = with( stimuli_misfit, paste0('T',idx[misfit==T]) ),
thr = 10 )
## miss-identification 2? ####
rm(list='comparison_fit')
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
d = comparison_dframe( observed_data=comparison_data$d_obs )
stimuli = unique_dframe( observed_data=comparison_data$d_obs, type='stimulus' )
d$left_factor = factor( d$left, levels=stimuli$name)
d$right_factor = factor( d$right, levels=stimuli$name)
idx_stimuli = d$left %in% with(stimuli_misfit, idx[misfit==T] ) |
d$right %in% with(stimuli_misfit, idx[misfit==T] )
idx_judges = d$Js %in% with(judges_misfit, idx[misfit==T] )
idx = idx_stimuli | idx_judges
comparison_residuals = residuals_BTm(
observed_data=comparison_data$d_obs[!idx,],
BTm_object=comparison_fit )
stimuli_misfit = misfit_BTm(
residuals_data=comparison_residuals,
by='stimulus', alpha=0.05 )
judges_misfit = misfit_BTm(
residuals_data=comparison_residuals,
by='judge', alpha=0.05)
with(stimuli_misfit, idx[misfit==T]); with(judges_misfit, idx[misfit==T] )
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '4_2_2_ITCJ_summaries.R' ) )
source( file.path( dir, '1_code', '4_3_2_ITCJ_summaries.R' ) )
## ITCJ analysis 4 ####
source( file.path( dir, '1_code', '4_4_1_ITCJ_analysis.R' ) )
source( file.path( dir, '1_code', '4_4_2_ITCJ_summaries.R' ) )
## ITCJ analysis 1 ####
source( file.path( dir, '1_code', '4_1_1_ITCJ_analysis.R' ) )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Preparing data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
d = model_dlist( observed_data = comparison_data$d_obs )
# str(d)
print('4_1_1 ITCJ analysis: data preparation complete')
## prior predictive ####
ns = 500
ITCJ_prior = ITCJ_prior_predictive_check(
dlist = d,
nsim = ns,
bXAc = rep(0, ns),
bXAd = matrix( rep(0, ns*d$GA), ncol=d$GA ),
bXIc = rep(0, ns),
bXId = matrix( rep(0, ns*d$GI), ncol=d$GI ),
bZKc = rep(0, ns),
bZKd = matrix( rep(0, ns*d$GK), ncol=d$GK ),
bZJc = rep(0, ns),
bZJd = matrix( rep(0, ns*d$GJ), ncol=d$GJ ),
hsI = matrix( rep(0, ns*d$GI), ncol=d$GI ),
hsJ = matrix( rep(0, ns*d$GJ), ncol=d$GJ ),
sA = rbeta2( n=ns, prob=0.5, theta=5),
sK = rep(0, ns),
mu_e = rep(0, 4),
rho_e = diag(4)
)
save( ITCJ_prior, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','fit','4_1_1_ITCJ_prior.Rdata' ) )
predictive_check_confusion_plot(
observed_data = comparison_data$d_obs,
distr = ITCJ_prior,
col_sim = rgb(0,0,1,0.1) )
predictive_check_wins_plot(
observed_data = comparison_data$d_obs,
distr = ITCJ_prior,
type='stimulus',
col_sim = rgb(0,0,1,0.05) )
