OR ~ bernoulli_logit( DR );
}
generated quantities{
// track
vector[ns] DR;      // discriminal difference
vector[ns] log_lik; // log-likelihood
// log-likelihood
for( n in 1:ns ){
DR[n] = ( TIA[ R1[n], R2[n] ] - TIA[ R3[n], R4[n] ] ) + BJ[ R5[n] ];
log_lik[n] = bernoulli_logit_lpmf( OR[n] | DR[n] );
}
}
"
# saving
model_nam = "4_6_1_ITCJ_model.stan"
writeLines(mcmc_code, con=file.path(dir, '1_code', model_nam) )
print('4_6_1 ITCJ analysis: model save complete')
## model fit ####
set_cmdstan_path( '/home/josema/.cmdstan/cmdstan-2.37.0')
mod = cmdstan_model( file.path( dir, '1_code', model_nam), ) # to create the C++ model
fit = mod$sample(
data = d, iter_warmup = 2000, iter_sampling = 2000, # 2000
chains = 4, parallel_chains = 4, adapt_delta=0.95 ) #,init=0
fit$save_object(
file = file.path(dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Preparing data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
d = model_dlist( observed_data = comparison_data$d_obs )
# str(d)
print('4_6_1 ITCJ analysis: data preparation complete')
# Modeling ####
## prior predictive ####
## model design ####
mcmc_code = "
data{
// data dimensions
int ns;     // number of experimental runs
int nsI;    // max. number of individuals
int nsA;    // max. number of stimuli
int nsJ;    // max. number of judges
int nsK;    // max. number of judgments
// categories discrete variables
int sup_XId;  // max. number of categories in XI
int sup_XAd;  // max. number of categories in XA
int sup_ZJd;  // max. number of categories in ZJ
int sup_ZKd;  // max. number of categories in ZK
// comparison data
array[ns] int<lower=1, upper=nsI> R1;   // individual (left)
array[ns] int<lower=1, upper=nsA> R2;   // stimuli (left)
array[ns] int<lower=1, upper=nsI> R3;   // individual (right)
array[ns] int<lower=1, upper=nsA> R4;   // stimuli (right)
array[ns] int<lower=1, upper=nsJ> R5;   // judges
array[ns] int<lower=1, upper=nsK> R6;   // judgments
array[ns] int<lower=0, upper=1> OR;     // outcome (dichotomous)
// individual-stimuli data
array[nsI*nsA] int<lower=1, upper=nsI> IA1;     // individuals
array[nsI*nsA] int<lower=1, upper=nsA> IA2;     // stimuli
array[nsI*nsA] real XAc;                        // stimuli predictor (continuous)
array[nsI*nsA] int<lower=1, upper=sup_XAd> XAd; // stimuli predictor (discrete)
array[nsI*nsA] real XIc;                        // individual predictor (continuous)
array[nsI*nsA] int<lower=1, upper=sup_XId> XId; // individual predictor (discrete)
// jugdment-judges data
array[nsJ*nsK] int<lower=1, upper=nsJ> JK1;     // judges
array[nsJ*nsK] int<lower=1, upper=nsK> JK2;     // judgments
array[nsJ*nsK] real ZKc;                        // judgments predictor (continuous)
array[nsJ*nsK] int<lower=1, upper=sup_ZKd> ZKd; // judgments predictor (discrete)
array[nsJ*nsK] real ZJc;                        // judges predictor (continuous)
array[nsJ*nsK] int<lower=1, upper=sup_ZJd> ZJd; // judges predictor (discrete)
}
parameters{
// covariate effects
real bXIc;            // individuals (continuous)
vector[sup_XId] bXId; // individuals (discrete)
vector[sup_ZJd] bZJd; // judges (discrete)
// error parameters
simplex[sup_XId] hsI;                       // individuals half-sigma
simplex[sup_ZJd] hsJ;                       // judges half-sigma
real<lower=0,upper=1> sA;                   // stimuli proportion of variability
array[max(nsI*nsA, nsJ*nsK)] vector[3] ze;  // errors (non-centered)
}
transformed parameters{
// declaring
vector[sup_XId] sI;   // individuals sigma
vector[sup_ZJd] sJ;   // judges sigma
vector[nsI] TI;       // individuals' trait
matrix[nsI,nsA] TIA;  // stimuli trait
vector[nsJ] BJ;       // judges' trait
// individuals-stimuli
sI = sup_XId * hsI;         // identification: sum(sI)=sup_XId & mean(sI)=1
for( ia in 1:(nsI*nsA) ){
// trait calculation
TI[ IA1[ia] ] = bXIc*XIc[ ia ] + bXId[ XId[ia] ] + sI[ XId[ia] ]*ze[ nsA*(IA1[ia]-1)+1, 1 ];
TIA[ IA1[ia], IA2[ia] ] = TI[ IA1[ia] ] + sA*ze[ ia, 2 ]; // identification: sA<sI
}
// judgment-judges
sJ = sup_ZJd * hsJ;         // identification: sum(sJ)=sup_ZJd & mean(sJ)=1
for( jk in 1:(nsJ*nsK) ){
// trait calculation
BJ[ JK1[jk] ] = bZJd[ ZJd[jk] ] + sJ[ ZJd[jk] ]*ze[ JK1[jk], 3 ];
}
}
model{
// no track
vector[ns] DR;     // discriminal difference
// priors
// covariate effects
bXIc ~ normal( 0, 0.05 );
bXId ~ normal( 0, 0.5 );
bZJd ~ normal( 0, 0.3 );
// errors
hsI ~ dirichlet( rep_vector(5, sup_XId) );  // identification: sum(hsI)=1 & mean(hsI)=1/sup_XId
hsJ ~ dirichlet( rep_vector(5, sup_ZJd) );  // identification: sum(hsJ)=1 & mean(hsJ)=1/sup_XId
sA ~ beta_proportion(0.5, 5);    // identification: sA<1
ze ~ multi_normal( rep_vector(0,3), diag_matrix( rep_vector(1,3) ) );
// identification: no correlation
// likelihood
for( n in 1:ns ){
DR[n] = ( TIA[ R1[n], R2[n] ] - TIA[ R3[n], R4[n] ] ) + BJ[ R5[n] ];
}
OR ~ bernoulli_logit( DR );
}
generated quantities{
// track
vector[ns] DR;      // discriminal difference
vector[ns] log_lik; // log-likelihood
// log-likelihood
for( n in 1:ns ){
DR[n] = ( TIA[ R1[n], R2[n] ] - TIA[ R3[n], R4[n] ] ) + BJ[ R5[n] ];
log_lik[n] = bernoulli_logit_lpmf( OR[n] | DR[n] );
}
}
"
# saving
model_nam = "4_6_1_ITCJ_model.stan"
writeLines(mcmc_code, con=file.path(dir, '1_code', model_nam) )
print('4_6_1 ITCJ analysis: model save complete')
## model fit ####
set_cmdstan_path( '/home/josema/.cmdstan/cmdstan-2.37.0')
mod = cmdstan_model( file.path( dir, '1_code', model_nam), ) # to create the C++ model
fit = mod$sample(
data = d, iter_warmup = 2000, iter_sampling = 2000, # 2000
chains = 4, parallel_chains = 4, adapt_delta=0.95 ) #,init=0
fit$save_object(
file = file.path(dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
print('4_6_1 ITCJ analysis: model fit complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_6_1_ITCJ_model.stan"
fit = readRDS(  file = file.path( dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
# posterior draws
post = as_draws_df( fit )
# Parameter plots
par_int = c('bXIc','bXId','bZJd','sA','^sI','^sJ')
mcmc_trace( post, regex_pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_betas_sigmas_trace.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_rank_overlay( post, regex_pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_betas_sigmas__rank.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_acf( post, regex_pars=par_int )
ggsave( filename='4_6_2_betas_sigmas_acf.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_areas_ridges( post, regex_pars=par_int )
ggsave( filename='4_6_2_betas_sigmas_area.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
# Stimuli trait plots
idx1 = sample( unique(comparison_data$d_obs$Is1),9) # random sample of intercepts
idx2 = sample( unique(comparison_data$d_obs$As1),9) # random sample of intercepts
par_int = paste0('TIA[',idx1,',',idx2,']')
mcmc_trace( post, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_stimuli_trait_trace.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_stimuli_trait_rank.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_acf( post, pars=par_int )
ggsave( filename='4_6_2_stimuli_trait_acf.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='4_6_2_stimuli_trait_area.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
# Individual trait plots
idx = sample( unique(comparison_data$d_obs$Is1),9) # random sample of intercepts
idx = idx[order(idx)]
par_int = paste0('TI[',idx,']')
mcmc_trace( post, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_individual_trait_trace.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_individual_trait_rank.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_acf( post, pars=par_int )
ggsave( filename='4_6_2_individual_trait_acf.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='4_6_2_individual_trait_area.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
# Judge biases plots
idx = sample( unique(comparison_data$d_obs$Js),9) # random sample of intercepts
idx = idx[order(idx)]
par_int = paste0('BJ[',idx,']')
mcmc_trace( post, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_judge_bias_trace.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_judge_bias_rank.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_acf( post, pars=par_int )
ggsave( filename='4_6_2_judge_bias_acf.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='4_6_2_judge_bias_area.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
print('4_6_2 ITCJ summaries: Stationarity, convergence, and mixing analysis complete')
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_6_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','sA','sI','sJ','TI','TIA','BJ') )
param_ITCJ
#' Parameter recovery for CBTL analysis
#'
#' @param bayesian_model fitted byesdian model
#' @param true_parameters population parameters used for simulation
#' @param par_int parameters of interest
#'
#' @return data.frame
#' @export
#'
#' @examples
ITCJ_parameter_recovery = function( bayesian_model,
true_parameters,
par_int ){
# # test
# bayesian_model=fit
# true_parameters = param_true
# par_int = c('sA','TI','TIA')
# all available parameters
post = as_draws_df( bayesian_model )
post = subset_draws( post, variable=par_int, regex=T )
if( any(names(post)=='sA') ){ names(post)[names(post)=='sA']='sA[1]' }
if( any(names(post)=='sK') ){ names(post)[names(post)=='sK']='sK[1]' }
d = summarize_draws( post )
d = merge(param_true, d, by='variable', sort=F, all.y=T )
d$rmse = sapply(
1:nrow(d),
function(i){ rmse(v=post[,d$variable[i]], a=d$value[i]) } )
# beta contrasts
if( any(par_int %in% 'bXId') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'bXId')
betas_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
betas_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=betas_contr$value[i]) } )
d = rbind(d, betas_contr)
}
if( any(par_int %in% 'bZJd') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'bZJd')
betas_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
betas_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=betas_contr$value[i]) } )
d = rbind(d, betas_contr)
}
# sigma contrasts
if( any(par_int %in% 'sI') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'sI')
sigma_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
sigma_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=sigma_contr$value[i]) } )
d = rbind(d, sigma_contr)
}
if( any(par_int %in% 'sJ') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'sJ')
sigma_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
sigma_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=sigma_contr$value[i]) } )
d = rbind(d, sigma_contr)
}
# return object
return(d)
}
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','sA','sI','sJ','TI','TIA','BJ') )
param_ITCJ
param_ITCJ$variable
write.csv(
param_ITCJ, row.names=T,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_6_2_ITCJ_estimated_parameter.csv' ) )
print('4_6_2 ITCJ summaries: estimated parameter extraction complete')
parameter_recovery_plot( parameter_summary_data=param_ITCJ )
parameter_recovery_plot( parameter_summary_data=param_ITCJ )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_6_1_ITCJ_model.stan"
fit = readRDS(  file = file.path( dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
# Stationarity, convergence, and mixing ####
# posterior draws
post = as_draws_df( fit )
# names(post)
# Parameter plots
par_int = c('bXIc','bXId','bZJd','sA','^sI','^sJ')
mcmc_trace( post, regex_pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_betas_sigmas_trace.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_rank_overlay( post, regex_pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_betas_sigmas__rank.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_acf( post, regex_pars=par_int )
ggsave( filename='4_6_2_betas_sigmas_acf.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_areas_ridges( post, regex_pars=par_int )
ggsave( filename='4_6_2_betas_sigmas_area.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
# Stimuli trait plots
idx1 = sample( unique(comparison_data$d_obs$Is1),9) # random sample of intercepts
idx2 = sample( unique(comparison_data$d_obs$As1),9) # random sample of intercepts
par_int = paste0('TIA[',idx1,',',idx2,']')
mcmc_trace( post, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_stimuli_trait_trace.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_stimuli_trait_rank.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_acf( post, pars=par_int )
ggsave( filename='4_6_2_stimuli_trait_acf.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='4_6_2_stimuli_trait_area.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
# Individual trait plots
idx = sample( unique(comparison_data$d_obs$Is1),9) # random sample of intercepts
idx = idx[order(idx)]
par_int = paste0('TI[',idx,']')
mcmc_trace( post, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_individual_trait_trace.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_individual_trait_rank.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_acf( post, pars=par_int )
ggsave( filename='4_6_2_individual_trait_acf.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='4_6_2_individual_trait_area.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
# Judge biases plots
idx = sample( unique(comparison_data$d_obs$Js),9) # random sample of intercepts
idx = idx[order(idx)]
par_int = paste0('BJ[',idx,']')
mcmc_trace( post, pars=par_int ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_judge_bias_trace.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_rank_overlay( post, pars=par_int ) +
coord_cartesian( ylim=c(70, NA) ) +
scale_color_manual( values=rep_len( rethink_palette, max(post$.chain) ) )
ggsave( filename='4_6_2_judge_bias_rank.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_acf( post, pars=par_int )
ggsave( filename='4_6_2_judge_bias_acf.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
mcmc_areas_ridges( post, pars=par_int )
ggsave( filename='4_6_2_judge_bias_area.png',
width=20, height=15, units='cm',
path = file.path( dir,'3_results','ITCJ_analysis','figures' ) )
print('4_6_2 ITCJ summaries: Stationarity, convergence, and mixing analysis complete')
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_6_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','sA','sI','sJ','TI','TIA','BJ') )
write.csv(
param_ITCJ, row.names=T,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_6_2_ITCJ_estimated_parameter.csv' ) )
print('4_6_2 ITCJ summaries: estimated parameter extraction complete')
parameter_recovery_plot( parameter_summary_data=param_ITCJ )
png(file=file.path( dir,'3_results','ITCJ_analysis','figures','4_6_2_ITCJ_parameter_recovery.png' ),
width=25, height=20, units='cm', res=200)
parameter_recovery_plot( parameter_summary_data=param_ITCJ )
dev.off()
parameter_rmse_plot( parameter_summary_data=param_ITCJ )
png(file=file.path( dir,'3_results','ITCJ_analysis','figures','4_6_2_ITCJ_parameter_rmse.png' ),
width=25, height=20, units='cm', res=200)
parameter_rmse_plot( parameter_summary_data=param_ITCJ )
dev.off()
parameter_neff_plot( parameter_summary_data=param_ITCJ )
parameter_rmse_plot( parameter_summary_data=param_ITCJ )
png(file=file.path( dir,'3_results','ITCJ_analysis','figures','4_6_2_ITCJ_parameter_rmse.png' ),
width=25, height=20, units='cm', res=200)
parameter_rmse_plot( parameter_summary_data=param_ITCJ )
dev.off()
parameter_neff_plot( parameter_summary_data=param_ITCJ )
png(file=file.path( dir,'3_results','ITCJ_analysis','figures','4_6_2_ITCJ_parameter_neff.png' ),
width=25, height=20, units='cm', res=200)
parameter_neff_plot( parameter_summary_data=param_ITCJ )
dev.off()
