# posterior draws
post = as_draws_df( fit )
# names(post)
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_3_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','sA','TI','TIA') )
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_3_2_ITCJ_estimated_parameter.csv' ) )
print('4_3_2 ITCJ summaries: estimated parameter extraction complete')
View(param_ITCJ)
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_4_1_ITCJ_model.stan"
fit = readRDS(
file = file.path(
dir,'3_results','ITCJ_analysis','fit', str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
# Stationarity, convergence, and mixing ####
# posterior draws
post = as_draws_df( fit )
# names(post)
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
View(param_true)
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_4_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('sA','TI','TIA','BJ') )
View(param_ITCJ)
warnings()
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_4_2_ITCJ_estimated_parameter.csv' ) )
print('4_4_2 ITCJ summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_5_1_ITCJ_model.stan"
fit = readRDS(  file = file.path( dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
# Stationarity, convergence, and mixing ####
# posterior draws
post = as_draws_df( fit )
# names(post)
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
View(param_true)
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_5_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','sA','TI','TIA','BJ') )
View(param_ITCJ)
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_5_2_ITCJ_estimated_parameter.csv' ) )
print('4_5_2 ITCJ summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_6_1_ITCJ_model.stan"
fit = readRDS(  file = file.path( dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
# Stationarity, convergence, and mixing ####
# posterior draws
post = as_draws_df( fit )
# names(post)
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
View(param_true)
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_6_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','sA','sI','sJ','TI','TIA','BJ') )
View(param_ITCJ)
# test
bayesian_model=fit
true_parameters = param_true
true_parameters
par_int = c('bXIc','bXId','bZJd','sA','sI','sJ','TI','TIA','BJ')
# all available parameters
post = as_draws_df( bayesian_model )
post = subset_draws( post, variable=par_int, regex=T )
post
if( any(names(post)=='sA') ){ names(post)[names(post)=='sA']='sA[1]' }
if( any(names(post)=='sK') ){ names(post)[names(post)=='sK']='sK[1]' }
names(post)
par_int = c('bXIc','bXId','bZJd','^sA','^sI','^sJ','TI','TIA','BJ')
# all available parameters
post = as_draws_df( bayesian_model )
post = subset_draws( post, variable=par_int, regex=T )
names(post)
if( any(names(post)=='sA') ){ names(post)[names(post)=='sA']='sA[1]' }
if( any(names(post)=='sK') ){ names(post)[names(post)=='sK']='sK[1]' }
names(post)
d = summarize_draws( post )
d = merge(param_true, d, by='variable', sort=F, all.y=T )
d$rmse = sapply(
1:nrow(d),
function(i){ rmse(v=post[,d$variable[i]], a=d$value[i]) } )
# beta contrasts
if( any(par_int %in% 'bXId') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'bXId')
betas_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
betas_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=betas_contr$value[i]) } )
d = rbind(d, betas_contr)
}
if( any(par_int %in% 'bZJd') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'bZJd')
betas_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
betas_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=betas_contr$value[i]) } )
d = rbind(d, betas_contr)
}
# sigma contrasts
if( any(par_int %in% 'sI') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'sI')
sigma_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
sigma_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=sigma_contr$value[i]) } )
d = rbind(d, sigma_contr)
}
if( any(par_int %in% 'sJ') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'sJ')
sigma_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
sigma_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=sigma_contr$value[i]) } )
d = rbind(d, sigma_contr)
}
d
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_6_1_ITCJ_model.stan"
fit = readRDS(  file = file.path( dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_6_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','^sA','^sI','^sJ','TI','TIA','BJ') )
View(param_ITCJ)
any(par_int %in% 'sI')
# test
bayesian_model=fit
true_parameters = param_true
par_int = c('bXIc','bXId','bZJd','^sA','^sI','^sJ','TI','TIA','BJ')
# all available parameters
post = as_draws_df( bayesian_model )
post = subset_draws( post, variable=par_int, regex=T )
if( any(names(post)=='sA') ){ names(post)[names(post)=='sA']='sA[1]' }
if( any(names(post)=='sK') ){ names(post)[names(post)=='sK']='sK[1]' }
d = summarize_draws( post )
d = merge(param_true, d, by='variable', sort=F, all.y=T )
d$rmse = sapply(
1:nrow(d),
function(i){ rmse(v=post[,d$variable[i]], a=d$value[i]) } )
# beta contrasts
if( any(par_int %in% 'bXId') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'bXId')
betas_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
betas_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=betas_contr$value[i]) } )
d = rbind(d, betas_contr)
}
summary_contr
if( any(par_int %in% 'bZJd') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'bZJd')
betas_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
betas_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=betas_contr$value[i]) } )
d = rbind(d, betas_contr)
}
summary_contr
# sigma contrasts
if( any(par_int %in% 'sI') ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'sI')
sigma_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
sigma_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=sigma_contr$value[i]) } )
d = rbind(d, sigma_contr)
}
summary_contr
par_int %in% 'sI'
par_int
par_int %in% 'bXId'
str_detect(par_int, 'bXId')
any( str_detect(par_int, 'bXId') )
names(post)
str_detect(names(post), 'bXId')
any( str_detect(names(post), 'bXId') )
# test
bayesian_model=fit
true_parameters = param_true
par_int = c('bXIc','bXId','bZJd','^sA','^sI','^sJ','TI','TIA','BJ')
# all available parameters
post = as_draws_df( bayesian_model )
post = subset_draws( post, variable=par_int, regex=T )
if( any(names(post)=='sA') ){ names(post)[names(post)=='sA']='sA[1]' }
if( any(names(post)=='sK') ){ names(post)[names(post)=='sK']='sK[1]' }
d = summarize_draws( post )
d = merge(param_true, d, by='variable', sort=F, all.y=T )
d$rmse = sapply(
1:nrow(d),
function(i){ rmse(v=post[,d$variable[i]], a=d$value[i]) } )
any( str_detect(names(post), 'bXId') )
# beta contrasts
if( any( str_detect(names(post), 'bXId') ) ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'bXId')
betas_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
betas_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=betas_contr$value[i]) } )
d = rbind(d, betas_contr)
}
summary_contr
if( any( str_detect(names(post), 'bZJd') ) ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'bZJd')
betas_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
betas_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=betas_contr$value[i]) } )
d = rbind(d, betas_contr)
}
summary_contr
# sigma contrasts
if( any( str_detect(names(post), 'sI') ) ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'sI')
sigma_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
sigma_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=sigma_contr$value[i]) } )
d = rbind(d, sigma_contr)
}
summary_contr
if( any( str_detect(names(post), 'sJ') ) ){
summary_contr = posterior_parameter_contrast(
posterior_df = post,
parameter_name = 'sJ')
sigma_contr = merge(param_true, summary_contr[[1]], by='variable', sort=F, all.y=T )
sigma_contr$rmse = sapply(
1:(ncol(summary_contr[[2]])-3),
function(i){ rmse(v=summary_contr[[2]][,i], a=sigma_contr$value[i]) } )
d = rbind(d, sigma_contr)
}
summary_contr
d
View(d)
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','cmdstanr','posterior','bayesplot','rethinking')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Data load ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
model_nam = "4_6_1_ITCJ_model.stan"
fit = readRDS(  file = file.path( dir,'3_results','ITCJ_analysis','fit',
str_replace(model_nam,'.stan','.RDS')) )
# fit$summary()
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
write.csv(
param_true, row.names=T,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('4_6_2 ITCJ summaries: true parameter extraction complete')
param_ITCJ = ITCJ_parameter_recovery(
bayesian_model = fit,
true_parameters = param_true,
par_int = c('bXIc','bXId','bZJd','^sA','^sI','^sJ','TI','TIA','BJ') )
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_6_2_ITCJ_estimated_parameter.csv' ) )
View(param_ITCJ)
write.csv(
param_ITCJ, row.names=F,
file=file.path( dir,'3_results','ITCJ_analysis','summaries','4_6_2_ITCJ_estimated_parameter.csv' ) )
print('4_6_2 ITCJ summaries: estimated parameter extraction complete')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','loo')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# parameter comparison ####
param_CBTL = read.csv(
file = file.path( dir,'3_results','CBTL_analysis','summaries','3_2_CBTL_estimated_parameter.csv' ) )
param_ITCJ = read.csv(
file = file.path( dir,'3_results','ITCJ_analysis','summaries','4_6_2_ITCJ_estimated_parameter.csv' ) )
idx = with( param_CBTL,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_CBTL[!idx,]
idx = with( param_ITCJ,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_ITCJ[!idx,]
idx = with( param_CBTL,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
idx1 = with( param_CBTL,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_CBTL[!idx1,]
idx1 = with( param_CBTL, str_detect(variable,' - ') )
idx2 = with( param_CBTL,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_CBTL[!idx2,]
param_CBTL[!(idx1 | idx2),]
round( param_CBTL[!(idx1 | idx2),], 3)
param_CBTL[,-1]
param_CBTL[,-1] = round( param_CBTL[,-1], 3)
param_CBTL
param_ITCJ = read.csv(
file = file.path( dir,'3_results','ITCJ_analysis','summaries','4_6_2_ITCJ_estimated_parameter.csv' ) )
param_ITCJ[,-1] = round( param_ITCJ[,-1], 3)
idx1 = with( param_CBTL, str_detect(variable,' - ') )
idx2 = with( param_CBTL,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_CBTL[!(idx1 | idx2),]
param_CBTL[idx1,]
idx1 = with( param_ITCJ, str_detect(variable,' - ') )
idx2 = with( param_ITCJ,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_ITCJ[!(idx1 | idx2),]
param_ITCJ[idx1,]
var_int = c('variable','value','mean','median','sd','q5','q95','rmse')
var_int = c('variable','value','mean','median','sd','q5','q95','rmse')
idx1 = with( param_CBTL, str_detect(variable,' - ') )
idx2 = with( param_CBTL,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_CBTL[!(idx1 | idx2), var_int]
param_CBTL[idx1, var_int]
idx1 = with( param_ITCJ, str_detect(variable,' - ') )
idx2 = with( param_ITCJ,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_ITCJ[!(idx1 | idx2), var_int]
param_ITCJ[idx1, var_int]
kabble( param_CBTL[!(idx1 | idx2), var_int] )
gt( param_CBTL[!(idx1 | idx2), var_int] )
## packages ####
librerias = c('tidyverse','loo','gt')
sapply(librerias, require, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
param_CBTL[!(idx1 | idx2), var_int] |>
gt() |>
tab_header( title = "Parameter table" ) )
param_CBTL[!(idx1 | idx2), var_int] |>
gt() |>
tab_header( title = "Parameter table" )
param_CBTL[!(idx1 | idx2), var_int]
idx1 = with( param_CBTL, str_detect(variable,' - ') )
idx2 = with( param_CBTL,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_CBTL[!(idx1 | idx2), var_int]
param_CBTL[!(idx1 | idx2), var_int] |>
gt() |>
tab_header( title = "Parameter table" )
param_CBTL[idx1, var_int] |>
gt() |>
tab_header( title = "Contrasts table" )
param_ITCJ[!(idx1 | idx2), var_int] |>
gt() |>
tab_header( title = "Parameter table" )
idx1 = with( param_ITCJ, str_detect(variable,' - ') )
idx2 = with( param_ITCJ,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_ITCJ[!(idx1 | idx2), var_int] |>
gt() |>
tab_header( title = "Parameter table" )
param_ITCJ[idx1, var_int] |>
gt() |>
tab_header( title = "Contrasts table" )
librerias = c('tidyverse','gt')
