img_name = '3_2_CBTL_posterior_individual.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
list.files( path=file.path(dir, 'CBTL_analysis'), full.names=TRUE)
list.files( path=file.path(dir, 'CBTL_analysis','cropped'), full.names=TRUE)
list.files( path=file.path(dir, 'CBTL_analysis','cropped'), full.names=TRUE)
list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=F)
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
filenames
# manual
img_name = '3_2_CBTL_judges_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
require(magick)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# manual
img_name = '3_2_CBTL_judges_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
require(magick)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# manual
img_name = '3_2_CBTL_judges_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
# manual
img_name = '3_2_CBTL_judges_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_crop( geometry=geometry_area(width=1968, height=1574, x_off=50, y_off=10),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1500, x_off=50, y_off=10),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1500, x_off=50, y_off=0),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1500, x_off=50, y_off=130),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1500, x_off=50, y_off=150),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1500, x_off=50, y_off=170),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1490, x_off=50, y_off=170),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1470, x_off=50, y_off=170),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1450, x_off=50, y_off=170),
image=img )
# manual
img_name = '3_2_CBTL_judges_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_crop( geometry=geometry_area(width=1900, height=1450, x_off=50, y_off=170),
image=img )
# manual
img_name = '3_2_CBTL_judges_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_crop( geometry=geometry_area(width=1900, height=1400, x_off=50, y_off=170),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1400, x_off=50, y_off=180),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1400, x_off=100, y_off=180),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1400, x_off=120, y_off=180),
image=img )
image_crop( geometry=geometry_area(width=1900, height=1400, x_off=140, y_off=180),
image=img )
image_crop( geometry=geometry_area(width=1850, height=1400, x_off=140, y_off=180),
image=img )
image_crop( geometry=geometry_area(width=1850, height=1350, x_off=140, y_off=180),
image=img )
image_crop( geometry=geometry_area(width=1800, height=1350, x_off=140, y_off=180),
image=img )
image_crop( geometry=geometry_area(width=1750, height=1350, x_off=140, y_off=180),
image=img )
image_crop( geometry=geometry_area(width=1770, height=1350, x_off=140, y_off=180),
image=img )
# manual
img_name = '3_2_CBTL_individual_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_crop( geometry=geometry_area(width=1770, height=1350, x_off=140, y_off=180),
image=img )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
require(magick)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
filenames
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
str_detect(filenames, 'influential')
idx = str_detect(filenames, 'influential')
filenames[!idx]
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# Cropping images ####
## CBTL analysis ####
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
idx = str_detect(filenames, 'influential')
for( i in 1:lenght(filenames[!idx]) ){
img = image_read( path=filenames[i] )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
}
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# Cropping images ####
## CBTL analysis ####
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
idx = str_detect(filenames, 'influential')
for( i in 1:length(filenames[!idx]) ){
img = image_read( path=filenames[i] )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
}
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
idx = str_detect(filenames, 'influential')
i=1
img = image_read( path=filenames[i] )
img
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# Cropping images ####
## CBTL analysis ####
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
idx = str_detect(filenames, 'influential')
for( i in 1:length(filenames[!idx]) ){
img = image_read( path=filenames[i] )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=filenames[i] )
}
for( i in 1:length(filenames[idx]) ){
img = image_read( path=filenames[i] )
img = image_crop( geometry=geometry_area(width=1770, height=1350, x_off=140, y_off=180),
image=img )
image_write( img, path=filenames[i] )
}
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# Cropping images ####
## CBTL analysis ####
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
idx = str_detect(filenames, 'influential')
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# Cropping images ####
## CBTL analysis ####
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
idx = str_detect(filenames, 'influential')
for( f in filenames[!idx] ){
img = image_read( path=f )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=f )
}
for( f in filenames[idx] ){
img = image_read( path=f )
img = image_crop( geometry=geometry_area(width=1770, height=1350, x_off=140, y_off=180),
image=img )
image_write( img, path=f )
}
write.csv( comparison_residuals, row.names=F,
file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_residuals1.csv' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','BradleyTerry2','brms','bayesplot','posterior','rethinking','loo')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx1 = d$name %in% with(stimuli_misfit, idx[misfit==T])
idx1
influential_points_plot( fit_data=d, fit_model=individual_fit )
## individuals ####
d = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_individual_data.csv' ) )
influential_points_plot( fit_data=d, fit_model=individual_fit )
## individuals ####
individual_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_individual_fit.RDS' ) )
d = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_individual_data.csv' ) )
influential_points_plot( fit_data=d, fit_model=individual_fit )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx1 = d$name %in% with(stimuli_misfit, idx[misfit==T])
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95)), ]
d
abs(ability) > quantile(abs(ability), 0.95))
with(d, abs(ability) > quantile(abs(ability), 0.95))
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95, na.rm=T)), ]
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95, na.rm=T)), ]
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx1 = d$name %in% with(stimuli_misfit, idx[misfit==T])
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95, na.rm=T)), ]
with(d, abs(ability) > quantile(abs(ability), 0.95, na.rm=T))
idx2 = with(d, abs(ability) > quantile(abs(ability), 0.95, na.rm=T))
is.na(idx2)
idx2[is.na(idx2)]
## individuals ####
individual_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_individual_fit.RDS' ) )
d = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_individual_data.csv' ) )
influential_points_plot( fit_data=d, fit_model=individual_fit )
# Second estimation misfits
comparison_data1 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data1.csv' ) )
comparison_data1
# Second estimation misfits
comparison_data1 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data1.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
comparison_residuals = residuals_BTm(
observed_data=comparison_data1,
BTm_object=comparison_fit )
comparison_data1
# Second estimation misfits
comparison_data1 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data1.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
comparison_residuals = residuals_BTm(
observed_data=comparison_data1,
BTm_object=comparison_fit )
# Second estimation misfits
comparison_data1 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data1.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit1.Rdata' ) )
comparison_residuals = residuals_BTm(
observed_data=comparison_data1,
BTm_object=comparison_fit )
comparison_residuals
stimuli_misfit = misfit_BTm(
residuals_data=comparison_residuals,
by='stimulus', alpha=0.05 )
stimuli_misfit
d = model_dframe( observed_data=comparison_data1,
BTm_object=comparison_fit, type='stimulus' )
d
idx1 = d$name %in% with(stimuli_misfit, idx[misfit==T])
idx2 = with(d, abs(ability) > quantile(abs(ability), 0.95, na.rm=T))
idx2[is.na(idx2)] = F
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95, na.rm=T)), ]
source( file.path( dir, '1_code', '3_2_CBTL_summaries.R' ) )
# test
parameter_summary_data = param_CBTL
thr = 10
y_lims = NULL
idx1 = str_detect( parameter_summary_data$variable, 'TIA[:punct:]')
idx2 = str_detect( parameter_summary_data$variable, 'TI[:punct:]')
idx3 = str_detect( parameter_summary_data$variable, 'BJ[:punct:]')
idx_plot = sum( c( sum(!(idx1|idx2|idx3)), sum(idx1), sum(idx2), sum(idx3))>=1 )
mf_row = c(2,2)
if( idx_plot==1 ){ mf_row=NULL } else if( idx_plot==2 ){ mf_row=c(1,2) }
if( is.null(y_lims) ){
y_lims = c( max(parameter_summary_data$rmse[!(idx1|idx2|idx3)]),
max(parameter_summary_data$rmse[idx1]),
max(parameter_summary_data$rmse[idx2]),
max(parameter_summary_data$rmse[idx3]) )
}
y_lims
# test
parameter_summary_data = param_CBTL
thr = 10
y_lims = NULL
idx1 = str_detect( parameter_summary_data$variable, 'TIA[:punct:]')
idx2 = str_detect( parameter_summary_data$variable, 'TI[:punct:]')
idx3 = str_detect( parameter_summary_data$variable, 'BJ[:punct:]')
idx_plot = sum( c( sum(!(idx1|idx2|idx3)), sum(idx1), sum(idx2), sum(idx3))>=1 )
mf_row = c(2,2)
if( idx_plot==1 ){ mf_row=NULL } else if( idx_plot==2 ){ mf_row=c(1,2) }
if( is.null(y_lims) ){
y_lims = c( max(parameter_summary_data$rmse[!(idx1|idx2|idx3)], na.rm=T),
max(parameter_summary_data$rmse[idx1], na.rm=T),
max(parameter_summary_data$rmse[idx2], na.rm=T),
max(parameter_summary_data$rmse[idx3], na.rm=T) )
}
y_lims
if( lenght(y_lims)!=4 ){
stop( 'you need 4 differents top limits in y_lims' )
}
if( length(y_lims)!=4 ){
stop( 'you need 4 differents top limits in y_lims' )
}
par(mfrow=mf_row)
if( sum(!(idx1|idx2|idx3))>=1 ){
with(parameter_summary_data[!(idx1|idx2|idx3),],
{
plot( value, rmse, pch=19, col=rgb(0,0,0,0.3),
ylim=c(0,y_lims[1]),
main='Betas and sigmas',
xlab='True parameter value',
ylab='RMSE')
sapply(
1:sum(!(idx1|idx2|idx3)),
function(i){ lines(x=rep(value[i],2), y=c(0,rmse[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=c(0, max(rmse)), lty=2, col=rgb(0,0,0,0.5) )
}
)
}
if( sum(idx1)>=1 ){
exteme = abs(parameter_summary_data$mean) > thr
print( sum(exteme, na.rm=T))
exteme[is.na(exteme)] = TRUE
with(parameter_summary_data[idx1 & !exteme,],
{
plot( value, rmse, pch=19, col=rgb(0,0,0,0.3),
ylim=c(0,y_lims[2]),
main='Stimulus traits',
xlab='True parameter value',
ylab='RMSE')
sapply(
1:sum(idx1),
function(i){ lines(x=rep(value[i],2), y=c(0,rmse[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=c(0, max(rmse)), lty=2, col=rgb(0,0,0,0.5) )
}
)
}
if( sum(idx2)>=1 ){
with(parameter_summary_data[idx2,],
{
plot( value, rmse, pch=19, col=rgb(0,0,0,0.3),
ylim=c(0,y_lims[3]),
main='Individual traits',
xlab='True parameter value',
ylab='RMSE')
sapply(
1:sum(idx2),
function(i){ lines(x=rep(value[i],2), y=c(0,rmse[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=c(0, max(rmse)), lty=2, col=rgb(0,0,0,0.5) )
}
)
}
if( sum(idx3)>=1 ){
with(parameter_summary_data[idx3,],
{
plot( value, rmse, pch=19, col=rgb(0,0,0,0.3),
ylim=c(0,y_lims[4]),
main='Judge biases',
xlab='True parameter value',
ylab='RMSE')
sapply(
1:sum(idx3),
function(i){ lines(x=rep(value[i],2), y=c(0,rmse[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=c(0, max(rmse)), lty=2, col=rgb(0,0,0,0.5) )
}
)
}
par(mfrow=c(1,1))
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '4_6_2_ITCJ_summaries.R' ) )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# Cropping images ####
## CBTL analysis ####
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
idx = str_detect(filenames, 'influential')
for( f in filenames[!idx] ){
img = image_read( path=f )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=f )
}
for( f in filenames[idx] ){
img = image_read( path=f )
img = image_crop( geometry=geometry_area(width=1770, height=1350, x_off=140, y_off=180),
image=img )
image_write( img, path=f )
}
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
librerias = c('magick','tidyverse')
sapply(librerias, require, character.only=T)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
filenames = list.files( path=file.path(dir, 'ITCJ_analysis', 'cropped'), full.names=T)
idx = str_detect(filenames, 'influential')
for( f in filenames[!idx] ){
img = image_read( path=f )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=f )
}
filenames
idx = str_detect(filenames, 'influential')
filenames[idx][1]
# manual
img_name = filenames[idx][1]
img_dir = file.path(dir, 'ITCJ_analysis', img_name)
img = image_read( path=img_dir )
img_dir = file.path(dir, 'ITCJ_analysis', 'cropped', img_name)
img = image_read( path=img_dir )
# manual
img_name = filenames[idx][1]
img_dir = file.path(dir, 'ITCJ_analysis', 'cropped', img_name)
img = image_read( path=img_dir )
filenames[idx][1]
# manual
img = image_read( path=filenames[idx][1] )
print(img)
filenames[idx][1]
# manual
img = image_read( path=filenames[idx][1] )
img
print(img)
