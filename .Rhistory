if( is.null(y_lim) ){
y_lim = with(d, c( min(p_lower), max(p_upper) ) )
}
if( type=='stimuli' ){
main_nam = 'Stimuli, win proportions'
if( !is.null(group) ){
main_nam = paste0( 'Stimuli win proportion, for XAd=', group)
}
x_axis_nam = 'stimuli_name'
x_axis_idx = seq( 1, nrow(d), by=20 )
}
if( type=='individual'){
main_nam = 'Individuals, win proportions'
if( !is.null(group) ){
main_nam = paste0( 'Individuals win proportion, for XId=', group)
}
x_axis_nam = 'Is'
x_axis_idx = 1:nrow(d)
}
y_axis_idx = seq( y_lim[1], y_lim[2], by=0.1 )
# plot
with( d,
{
plot( 1:nrow(d), p, pch=19, col=rgb(0,0,0,0.3),
ylim=y_lim, xaxt='n', yaxt='n',
main=main_nam, xlab='', ylab='Win proportion')
title(xlab=x_axis_nam, line=4)
axis(1, x_axis_idx, get(x_axis_nam)[x_axis_idx], las=2, cex.axis=1)
axis(2, y_axis_idx, round(y_axis_idx,2), las=2, cex.axis=1)
sapply( 1:nrow(d),
function(i){
lines( x=rep(i,2), y=c(p_lower[i],p_upper[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=round(y_axis_idx,2), lty=2, lwd=0.5, col=rgb(0,0,0,0.3))
}
)
}
win_plot_groups( d=data_summary, type='stimuli', y_lim=c(0,1) )
#'
#' @param d summary obtained with summary_data() function
#' @param type of summary, it needs to match with type in summary_data() function
#' @param y_lim y limits for plot
#' @param group names for groups
#'
#' @return plot
#' @export
#'
#' @examples
win_plot_groups = function( d,
type = 'stimuli',
y_lim = NULL,
group = NULL ){
# # test
# d = data_summary[data_summary$XAd==1,]
# type = 'stimuli'
# y_lim = NULL
# group = NULL
if( is.null(y_lim) ){
y_lim = with(d, c( min(p_lower), max(p_upper) ) )
}
if( type=='stimuli' ){
main_nam = 'Stimuli, win proportions'
if( !is.null(group) ){
main_nam = paste0( 'Stimuli win proportion, for XAd=', group)
}
x_axis_nam = 'stimuli_name'
x_axis_lab = '[Individual, stimulus] ID'
x_axis_idx = seq( 1, nrow(d), by=20 )
}
if( type=='individual'){
main_nam = 'Individuals, win proportions'
if( !is.null(group) ){
main_nam = paste0( 'Individuals win proportion, for XId=', group)
}
x_axis_nam = 'Is'
x_axis_lab = 'Individual ID'
x_axis_idx = 1:nrow(d)
}
y_axis_idx = seq( y_lim[1], y_lim[2], by=0.1 )
# plot
with( d,
{
plot( 1:nrow(d), p, pch=19, col=rgb(0,0,0,0.3),
ylim=y_lim, xaxt='n', yaxt='n',
main=main_nam, xlab='', ylab='Win proportion')
title(xlab=x_axis_nam, line=4)
axis(1, x_axis_idx, get(x_axis_nam)[x_axis_idx], las=2, cex.axis=1)
axis(2, y_axis_idx, round(y_axis_idx,2), las=2, cex.axis=1)
sapply( 1:nrow(d),
function(i){
lines( x=rep(i,2), y=c(p_lower[i],p_upper[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=round(y_axis_idx,2), lty=2, lwd=0.5, col=rgb(0,0,0,0.3))
}
)
}
win_plot_groups( d=data_summary, type='stimuli', y_lim=c(0,1) )
#'
#' @param d summary obtained with summary_data() function
#' @param type of summary, it needs to match with type in summary_data() function
#' @param y_lim y limits for plot
#' @param group names for groups
#'
#' @return plot
#' @export
#'
#' @examples
win_plot_groups = function( d,
type = 'stimuli',
y_lim = NULL,
group = NULL ){
# # test
# d = data_summary[data_summary$XAd==1,]
# type = 'stimuli'
# y_lim = NULL
# group = NULL
if( is.null(y_lim) ){
y_lim = with(d, c( min(p_lower), max(p_upper) ) )
}
if( type=='stimuli' ){
main_nam = 'Stimuli, win proportions'
if( !is.null(group) ){
main_nam = paste0( 'Stimuli win proportion, for XAd=', group)
}
x_axis_nam = 'stimuli_name'
x_axis_lab = '[Individual, stimulus] ID'
x_axis_idx = seq( 1, nrow(d), by=20 )
}
if( type=='individual'){
main_nam = 'Individuals, win proportions'
if( !is.null(group) ){
main_nam = paste0( 'Individuals win proportion, for XId=', group)
}
x_axis_nam = 'Is'
x_axis_lab = 'Individual ID'
x_axis_idx = 1:nrow(d)
}
y_axis_idx = seq( y_lim[1], y_lim[2], by=0.1 )
# plot
with( d,
{
plot( 1:nrow(d), p, pch=19, col=rgb(0,0,0,0.3),
ylim=y_lim, xaxt='n', yaxt='n',
main=main_nam, xlab='', ylab='Win proportion')
title(xlab=x_axis_lab, line=4)
axis(1, x_axis_idx, get(x_axis_nam)[x_axis_idx], las=2, cex.axis=1)
axis(2, y_axis_idx, round(y_axis_idx,2), las=2, cex.axis=1)
sapply( 1:nrow(d),
function(i){
lines( x=rep(i,2), y=c(p_lower[i],p_upper[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=round(y_axis_idx,2), lty=2, lwd=0.5, col=rgb(0,0,0,0.3))
}
)
}
win_plot_groups( d=data_summary, type='stimuli', y_lim=c(0,1) )
# stimuli wins
png(file=file.path( dir,'3_results','images','png','stimuli_wins.png' ),
width=25, height=15, units='cm', res=100)
win_plot_groups( d=data_summary, type='stimuli', y_lim=c(0,1) )
dev.off()
### win data ####
data_summary = summary_data( observed_data=comparison_data$d_obs, type='individual')
write.csv( data_summary, row.names=F,
file=file.path( dir,'3_results','summaries','individuals_win_summary.csv' ) )
print('Individuals, win summary complete')
data_summary = data_summary[order(data_summary$p, decreasing=T),]
win_plot_groups( d=data_summary, type='individual', y_lim=c(0,1))
# individual wins
png(file=file.path( dir,'3_results','images','png','individual_wins.png' ),
width=25, height=15, units='cm', res=100)
win_plot_groups( d=data_summary, type='individual', y_lim=c(0,1))
dev.off()
par(mfrow=c(1,3))
win_plot_groups( d=data_summary[data_summary$XId==1,],
type='individual', y_lim=c(0,1), group='1' )
win_plot_groups( d=data_summary[data_summary$XId==2,],
type='individual', y_lim=c(0,1), group='2' )
win_plot_groups( d=data_summary[data_summary$XId==3,],
type='individual', y_lim=c(0,1), group='3' )
par(mfrow=c(1,1))
# individual wins per group
png(file=file.path( dir,'3_results','images','png','individual_wins_groups.png' ),
width=40, height=15, units='cm', res=100)
par(mfrow=c(1,3))
win_plot_groups( d=data_summary[data_summary$XId==1,],
type='individual', y_lim=c(0,1), group='1' )
win_plot_groups( d=data_summary[data_summary$XId==2,],
type='individual', y_lim=c(0,1), group='2' )
win_plot_groups( d=data_summary[data_summary$XId==3,],
type='individual', y_lim=c(0,1), group='3' )
par(mfrow=c(1,1))
dev.off()
win_plot_continuous( d=data_summary, type='individual', y_lim=c(0,1), x_lim=c(0,5) )
#'
#' @param d summary obtained with summary_data() function
#' @param type of summary, it needs to match with type in summary_data() function
#' @param y_lim y limits for plot
#' @param group names for groups
#'
#' @return plot
#' @export
#'
#' @examples
win_plot_continuous = function( d,
type = 'stimuli',
y_lim = NULL,
x_lim = NULL,
group = NULL ){
# # test
# d = data_summary
# type = 'stimuli'
# y_lim = c(0,1)
# x_lim = NULL
# group = NULL
if( is.null(y_lim) ){
y_lim = with(d, c( min(p_lower), max(p_upper) ) )
}
if( type=='stimuli' ){
main_nam = 'Stimuli win proportions versus XAc'
if( !is.null(group) ){
main_nam = paste0( 'Stimuli win proportions versus XAc, for XAd=', group)
}
x_axis_nam = 'XAc'
x_axis_lab = 'Continuous variable'
if( is.null(x_lim) ){
x_lim = with(d, c( min(XAc), max(XAc) ) )
}
}
if( type=='individual'){
main_nam = 'Individual win proportions versus XIc'
if( !is.null(group) ){
main_nam = paste0( 'Individual win proportions versus XIc, for XId=', group)
}
x_axis_nam = 'XIc'
x_axis_lab = 'Chindlen age'
if( is.null(x_lim) ){
x_lim = with(d, c( min(XIc), max(XIc) ) )
}
}
y_axis_idx = seq( y_lim[1], y_lim[2], by=0.1 )
# plot
with( d,
{
plot( get(x_axis_nam), p, pch=19, col=rgb(0,0,0,0.3),
ylim=y_lim, xlim=x_lim, yaxt='n',
main=main_nam, xlab='', ylab='Win proportion')
title(xlab=x_axis_lab, line=4)
axis(2, y_axis_idx, round(y_axis_idx,2), las=2, cex.axis=1)
sapply( 1:nrow(d),
function(i){
lines( x=rep(get(x_axis_nam)[i],2), y=c(p_lower[i],p_upper[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=round(y_axis_idx,2), lty=2, lwd=0.5, col=rgb(0,0,0,0.3))
}
)
}
win_plot_continuous( d=data_summary, type='individual', y_lim=c(0,1), x_lim=c(0,5) )
#'
#' @param d summary obtained with summary_data() function
#' @param type of summary, it needs to match with type in summary_data() function
#' @param y_lim y limits for plot
#' @param group names for groups
#'
#' @return plot
#' @export
#'
#' @examples
win_plot_continuous = function( d,
type = 'stimuli',
y_lim = NULL,
x_lim = NULL,
group = NULL ){
# # test
# d = data_summary
# type = 'stimuli'
# y_lim = c(0,1)
# x_lim = NULL
# group = NULL
if( is.null(y_lim) ){
y_lim = with(d, c( min(p_lower), max(p_upper) ) )
}
if( type=='stimuli' ){
main_nam = 'Stimuli win proportions versus XAc'
if( !is.null(group) ){
main_nam = paste0( 'Stimuli win proportions versus XAc, for XAd=', group)
}
x_axis_nam = 'XAc'
x_axis_lab = 'Continuous variable'
if( is.null(x_lim) ){
x_lim = with(d, c( min(XAc), max(XAc) ) )
}
}
if( type=='individual'){
main_nam = 'Individual win proportions versus XIc'
if( !is.null(group) ){
main_nam = paste0( 'Individual win proportions versus XIc, for XId=', group)
}
x_axis_nam = 'XIc'
x_axis_lab = 'Children age'
if( is.null(x_lim) ){
x_lim = with(d, c( min(XIc), max(XIc) ) )
}
}
y_axis_idx = seq( y_lim[1], y_lim[2], by=0.1 )
# plot
with( d,
{
plot( get(x_axis_nam), p, pch=19, col=rgb(0,0,0,0.3),
ylim=y_lim, xlim=x_lim, yaxt='n',
main=main_nam, xlab='', ylab='Win proportion')
title(xlab=x_axis_lab, line=4)
axis(2, y_axis_idx, round(y_axis_idx,2), las=2, cex.axis=1)
sapply( 1:nrow(d),
function(i){
lines( x=rep(get(x_axis_nam)[i],2), y=c(p_lower[i],p_upper[i]), col=rgb(0,0,0,0.3) ) } )
abline( h=round(y_axis_idx,2), lty=2, lwd=0.5, col=rgb(0,0,0,0.3))
}
)
}
win_plot_continuous( d=data_summary, type='individual', y_lim=c(0,1), x_lim=c(0,5) )
png(file=file.path( dir,'3_results','images','png','individual_winsVSXIc.png' ),
width=25, height=15, units='cm', res=100)
win_plot_continuous( d=data_summary, type='individual', y_lim=c(0,1), x_lim=c(0,5) )
dev.off()
par(mfrow=c(1,3))
win_plot_continuous( d=data_summary[data_summary$XId==1,],
type='individual', y_lim=c(0,1), x_lim=c(0,5), group='1' )
win_plot_continuous( d=data_summary[data_summary$XId==2,],
type='individual', y_lim=c(0,1), x_lim=c(0,5), group='2' )
win_plot_continuous( d=data_summary[data_summary$XId==3,],
type='individual', y_lim=c(0,1), x_lim=c(0,5), group='3' )
par(mfrow=c(1,1))
png(file=file.path( dir,'3_results','images','png','individual_winsVSXIc_groups.png' ),
width=40, height=15, units='cm', res=100)
par(mfrow=c(1,3))
win_plot_continuous( d=data_summary[data_summary$XId==1,],
type='individual', y_lim=c(0,1), x_lim=c(0,5), group='1' )
win_plot_continuous( d=data_summary[data_summary$XId==2,],
type='individual', y_lim=c(0,1), x_lim=c(0,5), group='2' )
win_plot_continuous( d=data_summary[data_summary$XId==3,],
type='individual', y_lim=c(0,1), x_lim=c(0,5), group='3' )
par(mfrow=c(1,1))
dev.off()
print('Individuals, data plots complete')
# preliminar ####
rm(list=ls())
gc()
old_par = par()
## packages ####
librerias = c('tidyverse','BradleyTerry2')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
## preparing data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
d = BTL_data( comp_data=comparison_data )
d
# preliminar ####
rm(list=ls())
gc()
old_par = par()
## packages ####
librerias = c('tidyverse','BradleyTerry2')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
## preparing data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
comparison_data$d_obs
# test
observed_data = comparison_data$d_obs
observed_data
unique_stimuli_idx( observed_data=observed_data )
stimuli =  unique_stimuli_idx( observed_data=observed_data )
stimuli
observed_data = cbind(observed_data, stimuli$indices)
observed_data
# select data
d = observed_data[,c( 'Is1','As1','left','left_idx','Is2','As2','right','right_idx','OR' )]
d
# transform selected data
lev = unique( c(d$left, d$right) )
lev
d$IsAs1 = factor(d$left, levels=lev )
d$IsAs2 = factor(d$right, levels=lev )
stimuli
# preliminar ####
rm(list=ls())
gc()
old_par = par()
## packages ####
librerias = c('tidyverse','BradleyTerry2')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
## preparing data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
d = BTL_data( comp_data=comparison_data )
d = BTL_data( observed_data=comparison_data )
d = BTL_data( observed_data=comparison_data$d_obs )
d
#' BTL_data
#' produce data for BTL model
#'
#' @param observed_data observed simulated comparison data
#'
#' @return data.frame
#' @export
#'
#' @examples
BTL_data = function( observed_data ){
# # test
# observed_data = comparison_data$d_obs
# function
stimuli = unique_stimuli_idx( observed_data=observed_data )
observed_data = cbind(observed_data, stimuli$indices)
idx = with(observed_data, order(Is1,As1,Is2,As2) )
observed_data = observed_data[idx, ]
# str(observed_data)
# select data
d = observed_data[,c( 'Is1','As1','left','left_idx',
'Is2','As2','right','right_idx','OR' )]
# transform selected data
lev = stimuli$unique_stimuli
d$left = factor(d$left, levels=lev )
d$right = factor(d$right, levels=lev )
# str(data)
# return object
return(d)
}
d = BTL_data( observed_data=comparison_data$d_obs )
d
str(d)
# test
observed_data = comparison_data$d_obs
# function
stimuli = unique_stimuli_idx( observed_data=observed_data )
observed_data = cbind(observed_data, stimuli$indices)
idx = with(observed_data, order(Is1,As1,Is2,As2) )
observed_data = observed_data[idx, ]
# select data
d = observed_data[,c( 'Is1','As1','left','left_idx',
'Is2','As2','right','right_idx','OR' )]
# transform selected data
lev = stimuli$unique_stimuli
lev
#' BTL_data
#' produce data for BTL model
#'
#' @param observed_data observed simulated comparison data
#'
#' @return data.frame
#' @export
#'
#' @examples
BTL_data = function( observed_data ){
# # test
# observed_data = comparison_data$d_obs
# function
stimuli = unique_stimuli_idx( observed_data=observed_data )
observed_data = cbind(observed_data, stimuli$indices)
idx = with(observed_data, order(Is1,As1,Is2,As2) )
observed_data = observed_data[idx, ]
# str(observed_data)
# select data
d = observed_data[,c( 'Is1','As1','left','left_idx',
'Is2','As2','right','right_idx','OR' )]
# transform selected data
lev = stimuli$unique_stimuli$stimuli_name
d$left = factor(d$left, levels=lev )
d$right = factor(d$right, levels=lev )
# str(data)
# return object
return(d)
}
# preliminar ####
rm(list=ls())
gc()
old_par = par()
## packages ####
librerias = c('tidyverse','BradleyTerry2')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
## preparing data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
d = BTL_data( observed_data=comparison_data$d_obs )
str(d)
print('Frequentist model: data preparation complete')
# estimating abilities for combination individual_stimulus
start_time = Sys.time() # measure starting time
CJmod_freq = BTm( player1=IsAs1, player2=IsAs2, outcome=OR, data=d )
end_time = Sys.time() # measure end time
# estimating abilities for combination individual_stimulus
start_time = Sys.time() # measure starting time
CJmod_freq = BTm( player1=left, player2=right, outcome=OR, data=d )
end_time = Sys.time() # measure end time
end_time - start_time
# estimating abilities for combination individual_stimulus
start_time = Sys.time() # measure starting time
CBTL_model = BTm( player1=left, player2=right, outcome=OR, data=d )
end_time = Sys.time() # measure end time
end_time - start_time
#
# running time: (3.212183*60) seconds, 3.212183 min
# simulation runnin
summary(CBTL_model)
