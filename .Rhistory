dmom = observed_data[, var1]
d = dmom
var2 = 'Is2'
dmom = observed_data[, var2]
d = c( d, dmom )
}
if( type=='judges' ){
var1 = c('Js','Is1')
dmom = observed_data[, var1]
names(dmom) = str_replace(var1, pattern='[:digit:]', replacement='')
d = dmom
var2 = c('Js','Is2')
dmom = observed_data[, var2]
names(dmom) = str_replace(var2, pattern='[:digit:]', replacement='')
d = rbind( d, dmom )
}
# return object
return( table(d) )
}
comparison_counts( observed_data = comparison_data$d_obs,
type = 'judges' )
#### stimuli ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
#### individuals ####
count_individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'individual'
)
count_individuals
#' Count comparisons for stimuli and individuals
#'
#' @param observed_data observed data from cm_random() function
#' @param type type of counts: stimuli, individuals, default='stimuli'
#'
#' @return table
#' @export
#'
#' @examples
comparison_counts = function( observed_data,
type = 'stimuli' ){
# # test
# observed_data = comparison_data$d_obs
# type = 'judges'
if( type == 'stimuli' ){
var1 = c('Is1','As1')
dmom = observed_data[, var1]
names(dmom) = str_replace(var1, pattern='[:digit:]', replacement='')
d = dmom
var2 = c('Is2','As2')
dmom = observed_data[, var2]
names(dmom) = str_replace(var2, pattern='[:digit:]', replacement='')
d = rbind( d, dmom )
}
if( type == 'individual' ){
var1 = 'Is1'
dmom = observed_data[, var1]
d = dmom
var2 = 'Is2'
dmom = observed_data[, var2]
d = c( d, dmom )
}
if( type=='judges' ){
var1 = c('Js','Is1')
dmom = observed_data[, var1]
names(dmom) = str_replace(var1, pattern='[:digit:]', replacement='')
d = dmom
var2 = c('Js','Is2')
dmom = observed_data[, var2]
names(dmom) = str_replace(var2, pattern='[:digit:]', replacement='')
d = rbind( d, dmom )
}
# return object
return( table(d) )
}
#### stimuli ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
#### individuals ####
count_individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'individual'
)
count_individuals
#### judges ####
count_judges = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'judges'
)
count_judges
rowSums(count_judges)
rowSums(count_judges)
rowSums(count_judges)
count_judges
min(count_judges); max(count_judges)
rowSums(count_judges)
rowSums(count_judges)
#### judges ####
count_judges
#### judges ####
count_judges = as.matrix(count_judges)
count_judges
str(count_judges)
#### judges ####
incidence_judges = as.matrix(count_judges)
str(incidence_judges)
network_judges2individuals = graph_from_incidence_matrix(incidence_judges)
network_judges2individuals = graph_from_biadjacency_matrix(incidence_judges)
network_judges2individuals
igraph_options( plot.layout=layout.circle, vertex.size=10 )
plot(network_judges2individuals)
#### judges ####
count_judges2individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'judges'
)
count_judges2individuals
min(count_judges2individuals); max(count_judges2individuals)
# preliminar ####
rm(list=ls())
gc()
## package requirements ####
librerias = c('rethinking','rstan','coda','cmdstanr','posterior','bayesplot',
'stringr','tidyverse','rstan','runjags',
'BradleyTerry2','lme4','arm','igraph')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## loading functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
#### judges ####
count_judges2individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'judges'
)
count_judges2individuals
min(count_judges2individuals); max(count_judges2individuals)
rowSums(count_judges2individuals)
rowSums(count_judges2individuals)
rowSums(count_judges2individuals)
components_individuals
components_individuals = compute_connected_components(adjacency_individuals)
components_individuals
# preliminar ####
rm(list=ls())
gc()
## package requirements ####
librerias = c('rethinking','rstan','coda','cmdstanr','posterior','bayesplot',
'stringr','tidyverse','rstan','runjags',
'BradleyTerry2','lme4','arm','igraph')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## loading functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
#### stimuli ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
#### individuals ####
count_individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'individual'
)
count_individuals
#### judges ####
count_judges2individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'judges'
)
count_judges2individuals
min(count_judges2individuals); max(count_judges2individuals)
rowSums(count_judges2individuals)
N_items = max( unique( unlist( comparison_data$d_obs[,c('Is1','Is2')] ) ) )
adjacency_individuals = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$Is1,
idx2 = comparison_data$d_obs$Is2
)
#### judges ####
incidence_judges2individuals = as.matrix(count_judges)
# preliminar ####
rm(list=ls())
gc()
## package requirements ####
librerias = c('rethinking','rstan','coda','cmdstanr','posterior','bayesplot',
'stringr','tidyverse','rstan','runjags',
'BradleyTerry2','lme4','arm','igraph')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## loading functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
# Data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
# str(comparison_data)
## design ####
### comparison counts ####
#### stimuli ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
#### individuals ####
count_individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'individual'
)
count_individuals
#### judges ####
count_judges2individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'judges'
)
count_judges2individuals
min(count_judges2individuals); max(count_judges2individuals)
rowSums(count_judges2individuals)
### adjacency / incidence matrices ####
#### stimuli ####
stimuli = comparison_data$d_obs[,c('Is1','As1')]
names(stimuli) = c('Is','As')
dmom = comparison_data$d_obs[,c('Is2','As2')]
names(dmom) = c('Is','As')
stimuli = rbind(stimuli, dmom)
stimuli = stimuli[ with(stimuli, order(Is,As) ), ]
stimuli = paste0('[', apply( stimuli[,c('Is','As')], 1, paste, collapse=', ' ), ']')
stimuli = unique(stimuli)
stimuli = data.frame(stimuli, idx=1:length(stimuli) )
# adjacency comparison
comparison_data$d_obs$left = paste0(
'[', apply( comparison_data$d_obs[,c('Is1','As1')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$left_idx = match( comparison_data$d_obs$left, stimuli$stimuli )
comparison_data$d_obs$right = paste0(
'[', apply( comparison_data$d_obs[,c('Is2','As2')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$right_idx = match( comparison_data$d_obs$right, stimuli$stimuli )
# comparison_data$d_obs[,c('left','right','left_idx','right_idx')]
N_items = max( stimuli$idx )
adjacency_stimuli = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$left_idx,
idx2 = comparison_data$d_obs$right_idx
)
# rownames(adjacency_stimuli) = colnames(adjacency_stimuli) = stimuli$stimuli
# table(adjacency_stimuli)
#### individuals ####
N_items = max( unique( unlist( comparison_data$d_obs[,c('Is1','Is2')] ) ) )
adjacency_individuals = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$Is1,
idx2 = comparison_data$d_obs$Is2
)
#### judges ####
incidence_judges2individuals = as.matrix(count_judges)
network_judges2individuals = graph_from_biadjacency_matrix(incidence_judges2individuals)
#### judges ####
incidence_judges2individuals = as.matrix(count_judges2individuals)
igraph_options( plot.layout=layout.circle, vertex.size=10 )
E(network_individuals)$width = E(network_individuals)$weight / max( E(network_individuals)$weight )+0.2
plot(network_judges2individuals)
network_judges2individuals = graph_from_biadjacency_matrix(incidence_judges2individuals)
igraph_options( plot.layout=layout.circle, vertex.size=10 )
E(network_individuals)$width = E(network_individuals)$weight / max( E(network_individuals)$weight )+0.2
network_judges2individuals = graph_from_biadjacency_matrix(incidence_judges2individuals)
network_judges2individuals
igraph_options( plot.layout=layout.circle, vertex.size=10 )
E(incidence_judges2individuals)$width = E(incidence_judges2individuals)$weight / max( E(incidence_judges2individuals)$weight )+0.2
plot(network_judges2individuals)
network_judges2individuals = graph_from_biadjacency_matrix(incidence_judges2individuals)
igraph_options( plot.layout=layout.circle, vertex.size=10 )
E(incidence_judges2individuals)$width = E(incidence_judges2individuals)$weight / max( E(incidence_judges2individuals)$weight )+0.2
igraph_options( plot.layout=layout.circle, vertex.size=10 )
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max( E(network_judges2individuals)$weight )+0.2
E(network_judges2individuals)
network_judges2individuals = graph_from_biadjacency_matrix(
incidence_judges2individuals,
mode = "undirected",
weighted = T
)
network_judges2individuals = graph_from_biadjacency_matrix(
incidence_judges2individuals,
mode = "out",
weighted = T
)
igraph_options( plot.layout=layout.circle, vertex.size=10 )
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max( E(network_judges2individuals)$weight )+0.2
plot(network_judges2individuals)
plot(network_judges2individuals)
igraph_options( plot.layout=layout_as_bipartite, vertex.size=10 )
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max( E(network_judges2individuals)$weight )+0.2
plot(network_judges2individuals)
igraph_options( plot.layout=layout_as_bipartite, vertex.size=5 )
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max( E(network_judges2individuals)$weight )+0.2
plot(network_judges2individuals)
c("green", "cyan")[V(g)$type + 1L]
c("green", "cyan")[V(network_judges2individuals)$type + 1L]
colrs = c("blue", "red")[V(network_judges2individuals)$type + 1L]
network_judges2individuals = graph_from_biadjacency_matrix(
incidence_judges2individuals,
mode = "out",
weighted = T
)
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max( E(network_judges2individuals)$weight )+0.2
colrs = c("blue", "red")[V(network_judges2individuals)$type + 1L]
igraph_options( plot.layout=layout_as_bipartite, vertex.size=5, vertex.color=colrs )
plot(network_judges2individuals)
#### stimuli ####
network_stimuli = graph_from_adjacency_matrix( adjacency_stimuli,
mode = "undirected",
weighted = T)
E(network_stimuli)$width = E(network_stimuli)$weight / max( E(network_stimuli)$weight )+0.2
igraph_options( plot.layout=layout.circle, vertex.size=10, margin=0 )
plot(network_stimuli)
# preliminar ####
rm(list=ls())
gc()
## package requirements ####
librerias = c('rethinking','rstan','coda','cmdstanr','posterior','bayesplot',
'stringr','tidyverse','rstan','runjags',
'BradleyTerry2','lme4','arm','igraph')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## loading functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
## design ####
### comparison counts ####
#### stimuli ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
#### individuals ####
count_individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'individual'
)
count_individuals
#### judges ####
count_judges2individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'judges'
)
count_judges2individuals
min(count_judges2individuals); max(count_judges2individuals)
rowSums(count_judges2individuals)
### adjacency / incidence matrices ####
#### stimuli ####
stimuli = comparison_data$d_obs[,c('Is1','As1')]
names(stimuli) = c('Is','As')
dmom = comparison_data$d_obs[,c('Is2','As2')]
names(dmom) = c('Is','As')
stimuli = rbind(stimuli, dmom)
stimuli = stimuli[ with(stimuli, order(Is,As) ), ]
stimuli = paste0('[', apply( stimuli[,c('Is','As')], 1, paste, collapse=', ' ), ']')
stimuli = unique(stimuli)
stimuli = data.frame(stimuli, idx=1:length(stimuli) )
# adjacency comparison
comparison_data$d_obs$left = paste0(
'[', apply( comparison_data$d_obs[,c('Is1','As1')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$left_idx = match( comparison_data$d_obs$left, stimuli$stimuli )
comparison_data$d_obs$right = paste0(
'[', apply( comparison_data$d_obs[,c('Is2','As2')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$right_idx = match( comparison_data$d_obs$right, stimuli$stimuli )
# comparison_data$d_obs[,c('left','right','left_idx','right_idx')]
N_items = max( stimuli$idx )
adjacency_stimuli = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$left_idx,
idx2 = comparison_data$d_obs$right_idx
)
# rownames(adjacency_stimuli) = colnames(adjacency_stimuli) = stimuli$stimuli
# table(adjacency_stimuli)
#### individuals ####
N_items = max( unique( unlist( comparison_data$d_obs[,c('Is1','Is2')] ) ) )
adjacency_individuals = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$Is1,
idx2 = comparison_data$d_obs$Is2
)
#### judges ####
incidence_judges2individuals = as.matrix(count_judges2individuals)
# str(incidence_judges)
### comparisons design ####
#### stimuli ####
network_stimuli = graph_from_adjacency_matrix( adjacency_stimuli,
mode = "undirected",
#### stimuli ####
network_stimuli = graph_from_adjacency_matrix( adjacency_stimuli,
mode = "undirected",
weighted = T)
E(network_stimuli)$width = E(network_stimuli)$weight / max( E(network_stimuli)$weight )+0.2
igraph_options( plot.layout=layout.circle, vertex.size=10, margin=0 )
plot(network_stimuli)
network_judges2individuals = graph_from_biadjacency_matrix(
incidence_judges2individuals,
mode = "out",
weighted = T
)
E(network_judges2individuals)$width = E(network_judges2individuals)$weight / max( E(network_judges2individuals)$weight )+0.2
colrs = c("blue", "red")[V(network_judges2individuals)$type + 1L]
igraph_options( plot.layout=layout_as_bipartite, vertex.size=5, vertex.color=colrs )
plot(network_judges2individuals)
# preliminar ####
rm(list=ls())
gc()
## package requirements ####
librerias = c('rethinking','rstan','coda','cmdstanr','posterior','bayesplot',
'stringr','tidyverse','rstan','runjags',
'BradleyTerry2','lme4','arm','igraph')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## loading functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', '1_1_udf.R' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
#### stimuli ####
count_stimuli = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'stimuli'
)
count_stimuli
#### individuals ####
count_individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'individual'
)
count_individuals
#### judges ####
count_judges2individuals = comparison_counts(
observed_data = comparison_data$d_obs,
type = 'judges'
)
count_judges2individuals
min(count_judges2individuals); max(count_judges2individuals)
rowSums(count_judges2individuals)
stimuli = comparison_data$d_obs[,c('Is1','As1')]
names(stimuli) = c('Is','As')
dmom = comparison_data$d_obs[,c('Is2','As2')]
names(dmom) = c('Is','As')
stimuli = rbind(stimuli, dmom)
stimuli = stimuli[ with(stimuli, order(Is,As) ), ]
stimuli = paste0('[', apply( stimuli[,c('Is','As')], 1, paste, collapse=', ' ), ']')
stimuli = unique(stimuli)
stimuli = data.frame(stimuli, idx=1:length(stimuli) )
# adjacency comparison
comparison_data$d_obs$left = paste0(
'[', apply( comparison_data$d_obs[,c('Is1','As1')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$left_idx = match( comparison_data$d_obs$left, stimuli$stimuli )
comparison_data$d_obs$right = paste0(
'[', apply( comparison_data$d_obs[,c('Is2','As2')], 1, paste, collapse=', ' ), ']')
comparison_data$d_obs$right_idx = match( comparison_data$d_obs$right, stimuli$stimuli )
N_items = max( stimuli$idx )
adjacency_stimuli = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$left_idx,
idx2 = comparison_data$d_obs$right_idx
)
N_items = max( unique( unlist( comparison_data$d_obs[,c('Is1','Is2')] ) ) )
adjacency_individuals = build_adj_matrix(
N_items = N_items,
N_comparisons = nrow(comparison_data$d_obs),
idx1 = comparison_data$d_obs$Is1,
idx2 = comparison_data$d_obs$Is2
)
#### judges ####
incidence_judges2individuals = as.matrix(count_judges2individuals)
#### stimuli ####
network_stimuli = graph_from_adjacency_matrix( adjacency_stimuli,
mode = "undirected",
weighted = T)
E(network_stimuli)$width = E(network_stimuli)$weight / max( E(network_stimuli)$weight )+0.2
igraph_options( plot.layout=layout.circle, vertex.size=10, margin=0 )
plot(network_stimuli)
network_individuals = graph_from_adjacency_matrix(
adjacency_individuals,
mode = "undirected",
weighted = T
)
# plot
png(file=file.path( dir,'3_results','images','png','individual_network.png' ),
width=25, height=25, units='cm', res=400)
E(network_individuals)$width = E(network_individuals)$weight / max( E(network_individuals)$weight )+0.2
igraph_options( plot.layout=layout.circle, vertex.size=10 )
plot(network_individuals)
dev.off()
E(network_individuals)$width = E(network_individuals)$weight / max( E(network_individuals)$weight )+0.2
igraph_options( plot.layout=layout.circle, vertex.size=10 )
plot(network_individuals)
network_judges2individuals = graph_from_biadjacency_matrix(
incidence_judges2individuals,
mode = "out",
weighted = T
)
