#| crop: true
curve( dnorm(x, mean=0, sd=0.3), xlim=c(-1,1),
xlab='bZJd', ylab='Probability')
#| echo: false
#| fig-width: 3
#| fig-height: 3
#| label: prior_CBTL1_1
#| crop: true
curve( dnorm(x, mean=0, sd=0.3), xlim=c(-1,1),
xlab='bZJd', ylab='Probability')
#| echo: false
#| fig-width: 3
#| fig-height: 3
#| image-height: 3
#| label: prior_CBTL1_1
#| crop: true
curve( dnorm(x, mean=0, sd=0.3), xlim=c(-1,1),
xlab='bZJd', ylab='Probability')
#| echo: false
#| fig-width: 3
#| fig-height: 3
#| image-height: 2
#| label: prior_CBTL1_1
#| crop: true
curve( dnorm(x, mean=0, sd=0.3), xlim=c(-1,1),
xlab='bZJd', ylab='Probability')
#| echo: false
#| fig-width: 3
#| fig-height: 3
#| image-height: 2
#| label: prior_CBTL1_1
curve( dnorm(x, mean=0, sd=0.3), xlim=c(-1,1),
xlab='bZJd', ylab='Probability')
#| echo: false
#| fig-width: 3
#| fig-height: 3
#| image-height: 2
#| label: prior_CBTL1_1
img = curve( dnorm(x, mean=0, sd=0.3), xlim=c(-1,1),
xlab='bZJd', ylab='Probability')
image_crop( geometry=geometry_area(width=1900, height=600, x_off=0, y_off=140),
image=img )
#| echo: false
#| fig-width: 3
#| fig-height: 3
#| image-height: 2
#| label: prior_CBTL1_1
require('magick')
img = curve( dnorm(x, mean=0, sd=0.3), xlim=c(-1,1),
xlab='bZJd', ylab='Probability')
image_crop( geometry=geometry_area(width=1900, height=600, x_off=0, y_off=140),
image=img )
img = curve( dnorm(x, mean=0, sd=0.3), xlim=c(-1,1),
xlab='bZJd', ylab='Probability')
img
param_CBTL[!(idx1 | idx2), var_int] |>
gt() |>
opt_table_font( size=12 ) |>
fmt_number( decimals=3, use_seps=F ) |>
tab_header( title = "Parameter table" ) |>
tab_footnote(
footnote = 'No equivalent parameter in original simulation.',
locations = cells_body(columns=1, rows=10) )
#| echo: false
#| output: false
librerias = c('tidyverse','gt')
sapply(librerias, require, character.only=T)
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation'
var_int = c('variable','value','mean','median','sd','q5','q95','rmse')
#| echo: false
#| output: false
param_CBTL = read.csv(
file = file.path( dir,'summaries','3_2_CBTL_estimated_parameter.csv' ) )
param_CBTL[,-1] = round( param_CBTL[,-1], 3)
idx1 = with( param_CBTL, str_detect(variable,' - ') )
idx2 = with( param_CBTL,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_ITCJ = read.csv(
file = file.path( dir,'summaries','4_6_2_ITCJ_estimated_parameter.csv' ) )
param_ITCJ[,-1] = round( param_ITCJ[,-1], 3)
idx3 = with( param_ITCJ, str_detect(variable,' - ') )
idx4 = with( param_ITCJ,
str_detect(variable,'^TIA') |
str_detect(variable,'^TI') |
str_detect(variable,'^BJ') )
param_CBTL[!(idx1 | idx2), var_int] |>
gt() |>
opt_table_font( size=12 ) |>
fmt_number( decimals=3, use_seps=F ) |>
tab_header( title = "Parameter table" ) |>
tab_footnote(
footnote = 'No equivalent parameter in original simulation.',
locations = cells_body(columns=1, rows=10) )
matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli))
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','BradleyTerry2','brms','bayesplot','posterior','rethinking','loo')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
## first estimation ####
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit1.Rdata' ) )
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=F), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_list = vector('list', nrow(stimuli))
for( i in 1:nrow(stimuli) ){
names(preference_list)[i] = i
preference_list[[i]] = vector('list', 2)
names(preference_list[[i]]) = c('>>', '<<')
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
preference_list[[i]][[1]] = c( which(idx1), which(idx2) )
# lose over
idx1 = d$left == stimuli$name[i] & d$OR==0
idx2 = d$right == stimuli$name[i] & d$OR==1
preference_list[[i]][[2]] = c( which(idx1), which(idx2) )
}
matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=F), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
str(preference_matrix)
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=T), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
str(preference_matrix)
i=1
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
c( which(idx1), which(idx2) )
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=F), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
i=1
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
c( which(idx1), which(idx2) )
preference_list[i, c( which(idx1), which(idx2) )]
c( which(idx1), which(idx2) )
idx = c( which(idx1), which(idx2) )
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=F), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
for( i in 1:nrow(stimuli) ){
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
idx = c( which(idx1), which(idx2) )
if( idx > 0){
preference_list[i, idx] = 1
}
# lose over
idx1 = d$left == stimuli$name[i] & d$OR==0
idx2 = d$right == stimuli$name[i] & d$OR==1
idx = c( which(idx1), which(idx2) )
if( idx > 0){
preference_list[i, idx] = 0
}
}
i=1
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
idx = c( which(idx1), which(idx2) )
idx
idx > 0
idx = idx1 | idx2
idx
sum(idx)
i=1
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
idx1
idx2
idx = idx1 | idx2
idx
sum(idx) > 0
idx
which(idx)
# lose over
idx1 = d$left == stimuli$name[i] & d$OR==0
idx2 = d$right == stimuli$name[i] & d$OR==1
idx = idx1 | idx2
sum(idx) > 0
d[which(idx),]
i=1
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
idx = idx1 | idx2
sum(idx) > 0
# lose over
idx1 = d$left == stimuli$name[i] & d$OR==0
idx2 = d$right == stimuli$name[i] & d$OR==1
idx = idx1 | idx2
sum(idx) > 0
d[which(idx),]
stimuli$name[i]
colnames(preference_list)
col.names(preference_list)
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
row.names(preference_matrix) = col.names(preference_matrix) = stimuli$name
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=F), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
row.names(preference_matrix) = colnames(preference_matrix) = stimuli$name
str(preference_matrix)
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=F), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix)
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
str(preference_matrix)
colnames(preference_list)
attr(preference_list, 'dimnames')[[2]]
preference_list
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=F), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
colnames(preference_matrix)
colnames(preference_matrix) == stimuli$name[i]
d[which(idx),]
d[which(idx),]
d[which(idx1),]
d$right[which(idx1)]
colnames(preference_matrix) == d$right[which(idx1)]
idx1 = colnames(preference_matrix) == d$right[which(idx1)]
idx1
colnames(preference_matrix) == d$right[which(idx1)]
idx1 = colnames(preference_matrix) == d$right[idx1]
d$right[idx1]
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=F), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
i=1
# lose over
idx1 = d$left == stimuli$name[i] & d$OR==0
idx2 = d$right == stimuli$name[i] & d$OR==1
idx = idx1 | idx2
sum(idx) > 0
d$right[idx1]
d$right[idx1]
colnames(preference_matrix) == d$right[idx1]
d$right[idx1] %in% colnames(preference_matrix)
colnames(preference_matrix) %in% d$right[idx1]
idx1 = colnames(preference_matrix) %in% d$right[idx1]
preference_matrix[i, idx1]
preference_matrix[i, idx1] = 0
idx1 = colnames(preference_matrix) %in% d$right[idx1]
idx2 = colnames(preference_matrix) %in% d$left[idx2]
idx = idx1 | idx2
preference_matrix[i, idx]
preference_matrix[i, idx] = 0
preference_matrix[i, idx]
preference_matrix
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=T), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
i=1
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
idx = idx1 | idx2
sum(idx) > 0
idx1 = colnames(preference_matrix) %in% d$right[idx1]
idx2 = colnames(preference_matrix) %in% d$left[idx2]
idx = idx1 | idx2
idx
preference_matrix[i, idx]
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=T), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix(NA, nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
for( i in 1:nrow(stimuli) ){
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
idx = idx1 | idx2
if( sum(idx) > 0 ){
idx1 = colnames(preference_matrix) %in% d$right[idx1]
idx2 = colnames(preference_matrix) %in% d$left[idx2]
idx = idx1 | idx2
preference_matrix[i, idx] = 1
}
# lose over
idx1 = d$left == stimuli$name[i] & d$OR==0
idx2 = d$right == stimuli$name[i] & d$OR==1
idx = idx1 | idx2
if( sum(idx) > 0 ){
idx1 = colnames(preference_matrix) %in% d$right[idx1]
idx2 = colnames(preference_matrix) %in% d$left[idx2]
idx = idx1 | idx2
preference_matrix[i, idx] = 0
}
}
head(preference_list)
head(preference_matrix)
View(preference_matrix)
# preference assessment
stimuli = unique_dframe( observed_data=comparison_data$d_true,
type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=T), ]
d = cbind( comparison_data$d_obs, stimulus_index( comparison_data$d_obs ) )
preference_matrix = matrix('', nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
for( i in 1:nrow(stimuli) ){
# win over
idx1 = d$left == stimuli$name[i] & d$OR==1
idx2 = d$right == stimuli$name[i] & d$OR==0
idx = idx1 | idx2
if( sum(idx) > 0 ){
idx1 = colnames(preference_matrix) %in% d$right[idx1]
idx2 = colnames(preference_matrix) %in% d$left[idx2]
idx = idx1 | idx2
preference_matrix[i, idx] = 1
}
# lose over
idx1 = d$left == stimuli$name[i] & d$OR==0
idx2 = d$right == stimuli$name[i] & d$OR==1
idx = idx1 | idx2
if( sum(idx) > 0 ){
idx1 = colnames(preference_matrix) %in% d$right[idx1]
idx2 = colnames(preference_matrix) %in% d$left[idx2]
idx = idx1 | idx2
preference_matrix[i, idx] = 0
}
}
View(preference_matrix)
write.csv(
preference_matrix, row.names=F,
file=file.path( dir,'3_results','CBTL_analysis','summaries','preference_analysis.csv' ) )
write.csv(
preference_matrix, row.names=F,
file=file.path( dir,'3_results','CBTL_analysis','summaries','3_2_preference_analysis.csv' ) )
write.csv(
preference_matrix, row.names=T,
file=file.path( dir,'3_results','CBTL_analysis','summaries','3_2_preference_analysis.csv' ) )
### misfit analysis ####
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
judges_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_judges_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx1 = d$name %in% with(stimuli_misfit, idx[misfit==T])
d[idx1, ]; d[ with(d, abs(ability) > quantile(abs(ability), 0.95)), ]
# test
true_data = comparison_data$d_true
stimuli = unique_dframe( observed_data=true_data, type='stimulus', true_par=T )
stimuli = stimuli[ order(stimuli$TIA, decreasing=T), ]
d = cbind( true_data, stimulus_index( true_data ) )
d
preference_matrix = matrix('', nrow=nrow(stimuli), ncol=nrow(stimuli) )
rownames(preference_matrix) = colnames(preference_matrix) = stimuli$name
# preparing data
stimuli = unique_dframe( observed_data=true_data, type='individual', true_par=T )
stimuli
# test
true_data = comparison_data$d_true
type = 'stimulus'
# preparing data
dunique = unique_dframe( observed_data=true_data, type=type, true_par=T )
dunique
# test
true_data = comparison_data$d_true
type = 'individual'
if( type=='stimulus' ){
var_int = c('name', 'TIA')
}
if( type=='individual' ){
var_int = c('Is', 'TI')
}
if( type=='judge' ){
var_int = c('Js', 'BJ')
}
var_int
# preparing data
dunique = unique_dframe( observed_data=true_data, type=type, true_par=T )
dunique
dunique = dunique[ order(dunique[,var_int[2]], decreasing=T), ]
dunique
true_data
# preparing data
dunique = unique_dframe( observed_data=true_data, type='stimulus', true_par=T )
dunique = dunique[ order(dunique$TIA, decreasing=T), ]
d = cbind( true_data, stimulus_index( true_data ) )
# building preference matrix
preference_matrix = matrix('', nrow=nrow(dunique), ncol=nrow(dunique) )
rownames(preference_matrix) = colnames(preference_matrix) = dunique$name
for( i in 1:nrow(dunique) ){
# win over
idx1 = d$left == dunique$name[i] & d$OR==1
idx2 = d$right == dunique$name[i] & d$OR==0
idx = idx1 | idx2
if( sum(idx) > 0 ){
idx1 = colnames(preference_matrix) %in% d$right[idx1]
idx2 = colnames(preference_matrix) %in% d$left[idx2]
idx = idx1 | idx2
preference_matrix[i, idx] = 1
}
# lose over
idx1 = d$left == dunique$name[i] & d$OR==0
idx2 = d$right == dunique$name[i] & d$OR==1
idx = idx1 | idx2
if( sum(idx) > 0 ){
idx1 = colnames(preference_matrix) %in% d$right[idx1]
idx2 = colnames(preference_matrix) %in% d$left[idx2]
idx = idx1 | idx2
preference_matrix[i, idx] = 0
}
}
preference_matrix
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','BradleyTerry2','brms','bayesplot','posterior','rethinking','loo')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
set_rope(tp=param_true)
param_true
set_rope( tp=param_true$value )
param_true = cbind( param_true, set_rope( tp=param_true$value ) )
param_true
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
param_true
## true parameters ####
load( file=file.path( dir,'2_data','population_data.Rdata' ) )
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
param_true = true_parameter(
population_data = population_data,
comparison_data = comparison_data )
param_true = cbind( param_true, round( set_rope( tp=param_true$value ), 3) )
write.csv(
param_true, row.names=F,
file=file.path( dir,'3_results','population_summary','summaries','true_parameters.csv' ) )
print('3_2 CBTL summaries: true parameter extraction complete')
### parameter recovery ####
rm(list='comparison_fit')
comparison_data2 = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data2.csv' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
judge_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_judge_fit.RDS' ) )
individual_fit = readRDS( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_individual_fit.RDS' ) )
param_CBTL = CBTL_parameter_recovery(
observed_data = comparison_data2,
stimuli_model = comparison_fit,
individual_model = individual_fit,
judge_model = judge_fit,
true_parameters = param_true,
par_int = c('b_XIc','b_XId','b_ZJd','sd','sigma','r_Is','r_Js') )
param_CBTL
