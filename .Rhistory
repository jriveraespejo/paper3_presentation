1:nrow(predicted_outcome),
function(i){
points( 1:ncol(predicted_outcome), predicted_outcome[i,], pch=19, col=rgb(0,0,1,0.1) )
} )
points( 1:nrow(relevant_data), relevant_data[,var_int[idx]], pch=19, col=rgb(0,0,0,0.5) )
abline( lty=2, col=rgb(0,0,0,0.5), h=c( min(predicted_outcome), max(predicted_outcome) ) )
abline( lty=2, col=rgb(0,0,0,0.5), h=quantile(predicted_outcome, probs=c(0.025,0.975) ) )
legend( 'topleft', pch=rep(19, 2), col=c(rgb(0,0,0,0.5), rgb(0,0,1,0.5)), bty='n',
legend=c('Observed data', paste0(nrow(predicted_outcome),' samples from the distribution')) )
legend( 'topright', lty=2, col=rgb(0,0,0,0.5), bty='n', legend=c('100% IQR','95% IQR') )
}
#### Priors 1 ####
ns = 200
judge_trait_prior1 = lmm_predictive_check(
relevant_data = d,
type='judge',
bP1c = 0, bP1d = 0, bP2c = 0,
bP2d = matrix( rnorm( n=max(d$ZJd)*ns, mean=0, sd=0.3), ncol=max(d$ZJd) ),
s1 = rexp( n=ns, rate=25),
s2 = rexp( n=ns, rate=50) )
lmm_predictive_check_plot(
relevant_data = d,
predicted_outcome = judge_trait_prior1 )
#### Priors 1 ####
ns = 100
judge_trait_prior1 = lmm_predictive_check(
relevant_data = d,
type='judge',
bP1c = 0, bP1d = 0, bP2c = 0,
bP2d = matrix( rnorm( n=max(d$ZJd)*ns, mean=0, sd=0.3), ncol=max(d$ZJd) ),
s1 = rexp( n=ns, rate=25),
s2 = rexp( n=ns, rate=50) )
lmm_predictive_check_plot(
relevant_data = d,
predicted_outcome = judge_trait_prior1 )
#### Priors 1 ####
ns = 150
judge_trait_prior1 = lmm_predictive_check(
relevant_data = d,
type='judge',
bP1c = 0, bP1d = 0, bP2c = 0,
bP2d = matrix( rnorm( n=max(d$ZJd)*ns, mean=0, sd=0.3), ncol=max(d$ZJd) ),
s1 = rexp( n=ns, rate=25),
s2 = rexp( n=ns, rate=50) )
lmm_predictive_check_plot(
relevant_data = d,
predicted_outcome = judge_trait_prior1 )
#### Priors 1 ####
ns = 200
judge_trait_prior1 = lmm_predictive_check(
relevant_data = d,
type='judge',
bP1c = 0, bP1d = 0, bP2c = 0,
bP2d = matrix( rnorm( n=max(d$ZJd)*ns, mean=0, sd=0.3), ncol=max(d$ZJd) ),
s1 = rexp( n=ns, rate=25),
s2 = rexp( n=ns, rate=50) )
lmm_predictive_check_plot(
relevant_data = d,
predicted_outcome = judge_trait_prior1 )
#### Priors 1 ####
ns = 200
judge_trait_prior1 = lmm_predictive_check(
relevant_data = d,
type='judge',
bP1c = 0, bP1d = 0, bP2c = 0,
bP2d = matrix( rnorm( n=max(d$ZJd)*ns, mean=0, sd=0.3), ncol=max(d$ZJd) ),
s1 = rexp( n=ns, rate=25),
s2 = rexp( n=ns, rate=50) )
write.csv( judge_trait_prior1, row.names=T,
file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_judge_trait_prior1.csv' ) )
png(file=file.path( dir,'3_results','CBTL_analysis','figures','3_1_CBTL_judge_trait_prior1.png' ),
width=25, height=15, units='cm', res=200)
lmm_predictive_check_plot(
relevant_data = d,
predicted_outcome = judge_trait_prior1 )
dev.off()
print('3_1 CBTL analysis: prior predictive analysis complete')
### model fit ####
set_cmdstan_path( '/home/josema/.cmdstan/cmdstan-2.37.0')
d$ZJd = factor(d$ZJd)
judges_fit = brm(
data = d,
family = gaussian,
formula = res ~ -1 + ZJd + (1 | Js),
prior = c( prior( normal(0, 0.3), class=b, coef=ZJd1 ),
prior( normal(0, 0.3), class=b, coef=ZJd2 ),
prior( normal(0, 0.3), class=b, coef=ZJd3 ),
prior( exponential(25), class=sd ),
prior( exponential(50), class=sigma )),
warmup=2000, iter=4000, chains=4, cores=4,
seed=147258, control=list(adapt_delta=0.95)
)
saveRDS( judges_fit,
file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_judge_fit.RDS') )
print('3_1 CBTL analysis: stimuli-individual data analysis complete')
judges_fit = brm(
data = d,
family = gaussian,
formula = res ~ -1 + ZJd + (1 | Js),
prior = c( prior( normal(0, 0.3), class=b, coef=ZJd1 ),
prior( normal(0, 0.3), class=b, coef=ZJd2 ),
prior( normal(0, 0.3), class=b, coef=ZJd3 ),
prior( exponential(50), class=sd ),
prior( exponential(25), class=sigma )),
warmup=2000, iter=4000, chains=4, cores=4,
seed=147258, control=list(adapt_delta=0.95)
)
#### Priors 1 ####
ns = 200
judge_trait_prior1 = lmm_predictive_check(
relevant_data = d,
type='judge',
bP1c = 0, bP1d = 0, bP2c = 0,
bP2d = matrix( rnorm( n=max(d$ZJd)*ns, mean=0, sd=0.3), ncol=max(d$ZJd) ),
s1 = rexp( n=ns, rate=50),
s2 = rexp( n=ns, rate=25) )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','BradleyTerry2','cmdstanr','brms')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Comparison data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
### data preparation ####
#
# Assuming misfits should not be considered in the analysis
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
d = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_comparison_data2.csv' ) )
d$res = residuals(comparison_fit, type='response') # (a) Eq.4, (b) Eq.9
#### Priors 1 ####
ns = 200
judge_trait_prior1 = lmm_predictive_check(
relevant_data = d,
type='judge',
bP1c = 0, bP1d = 0, bP2c = 0,
bP2d = matrix( rnorm( n=max(d$ZJd)*ns, mean=0, sd=0.3), ncol=max(d$ZJd) ),
s1 = rexp( n=ns, rate=50),
s2 = rexp( n=ns, rate=25) )
lmm_predictive_check_plot(
relevant_data = d,
predicted_outcome = judge_trait_prior1 )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
require(magick)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
## 3_1_CBTL_judge_trait_prior1 ####
img_name = '3_1_CBTL_judge_trait_prior1.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','BradleyTerry2','cmdstanr','brms')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
# Comparison data ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx = d$name %in% with(stimuli_misfit, idx[misfit==T])
### data preparation ####
#
# Assuming misfits should not be considered in the analysis
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx = d$name %in% with(stimuli_misfit, idx[misfit==T])
### data preparation ####
#
# Assuming misfits should not be considered in the analysis
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
d = model_dframe( observed_data=comparison_data$d_obs,
BTm_object=comparison_fit, type='stimulus' )
idx = d$name %in% with(stimuli_misfit, idx[misfit==T])
write.csv( d[!idx,], row.names=F,
file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_individual_data.csv' ) )
print('3_1 CBTL analysis: Individual traits and inferences data preparation complete')
#### Priors 1 ####
ns = 400
stimuli_trait_prior1 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.05),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=0.5), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=2),
s2 = rexp( n=ns, rate=10) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior1 )
0.2/1
1/0.2
#### Priors 1 ####
ns = 400
stimuli_trait_prior1 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.05),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=0.5), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=2),
s2 = rexp( n=ns, rate=10) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior1 )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior1 )
stimuli_trait_prior2 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.1),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=1), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=2),
s2 = rexp( n=ns, rate=10) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior2 )
stimuli_trait_prior3 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.1),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=1), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=1),
s2 = rexp( n=ns, rate=5) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior3 )
#### Priors 1 ####
ns = 400
stimuli_trait_prior1 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.05),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=0.5), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=2),
s2 = rexp( n=ns, rate=10) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior1 )
#### Priors 1 ####
ns = 300
stimuli_trait_prior1 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.05),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=0.5), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=2),
s2 = rexp( n=ns, rate=10) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior1 )
#### Priors 1 ####
ns = 400
stimuli_trait_prior1 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.05),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=0.5), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=2),
s2 = rexp( n=ns, rate=10) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior1 )
#### Priors 2 ####
ns = 400
stimuli_trait_prior2 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.05),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=0.5), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=1),
s2 = rexp( n=ns, rate=5) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior2 )
stimuli_trait_prior3 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.1),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=1), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=2),
s2 = rexp( n=ns, rate=10) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior3 )
stimuli_trait_prior4 = lmm_predictive_check(
relevant_data = d[!idx, ],
type='stimulus',
bP1c = 0, bP1d = 0,
bP2c = rnorm( n=ns, mean=0, sd=0.1),
bP2d = matrix( rnorm( n=max(d$XId)*ns, mean=0, sd=1), ncol=max(d$XId) ),
s1 = rexp( n=ns, rate=1),
s2 = rexp( n=ns, rate=5) )
lmm_predictive_check_plot(
relevant_data = d[!idx, ],
predicted_outcome = stimuli_trait_prior4 )
hist( rexp(n=500, rate=1), breaks=50)
hist( rexp(n=500, rate=5), breaks=50)
hist( rexp(n=500, rate=1), breaks=50)
hist( rexp(n=500, rate=1), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=5), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=1), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=5), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=1), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=2), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=1), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=3), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=1), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=4), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=1), breaks=50, xlim=c(0, 6))
hist( rexp(n=500, rate=5), breaks=50, xlim=c(0, 6))
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
## CBTL analysis ####
source( file.path( dir, '1_code', '3_1_CBTL_analysis.R' ) )
source( file.path( dir, '1_code', '3_2_CBTL_summaries.R' ) )
## 3_2_CBTL_stimuli_trait_comparison_plot1_2 ####
img_name = '3_2_CBTL_stimuli_trait_comparison_plot1_2.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
require(magick)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
## 3_2_CBTL_stimuli_trait_comparison_plot1_2 ####
img_name = '3_2_CBTL_stimuli_trait_comparison_plot1_2.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','BradleyTerry2','brms','bayesplot','posterior','rethinking','loo')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
### miss-identification 2? ####
rm(list='comparison_fit')
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
d = comparison_dframe( observed_data=comparison_data$d_obs )
stimuli = unique_dframe( observed_data=comparison_data$d_obs, type='stimulus' )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
librerias = c('tidyverse','BradleyTerry2','brms','bayesplot','posterior','rethinking','loo')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
## user defined functions ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_manuscript'
source( file.path( dir, '1_code', 'udf.R' ) )
### miss-identification 2? ####
load( file=file.path( dir,'2_data','comparison_data_train.Rdata' ) )
rm(list='comparison_fit')
load( file=file.path( dir, '3_results','CBTL_analysis','fit','3_1_CBTL_comparison_fit2.Rdata' ) )
stimuli_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_stimuli_misfit1.csv' ) )
judges_misfit = read.csv( file=file.path( dir,'3_results','CBTL_analysis','fit','3_1_CBTL_judges_misfit1.csv' ) )
d = comparison_dframe( observed_data=comparison_data$d_obs )
stimuli = unique_dframe( observed_data=comparison_data$d_obs, type='stimulus' )
d$left_factor = factor( d$left, levels=stimuli$name)
d$right_factor = factor( d$right, levels=stimuli$name)
idx_stimuli = d$left %in% with(stimuli_misfit, idx[misfit==T] ) |
d$right %in% with(stimuli_misfit, idx[misfit==T] )
idx_judges = d$Js %in% with(judges_misfit, idx[misfit==T] )
idx = idx_stimuli | idx_judges
comparison_residuals = residuals_BTm(
observed_data=comparison_data$d_obs[!idx,],
BTm_object=comparison_fit )
stimuli_misfit = misfit_BTm(
residuals_data=comparison_residuals,
by='stimulus', alpha=0.05 )
judges_misfit = misfit_BTm(
residuals_data=comparison_residuals,
by='judge', alpha=0.05)
with(stimuli_misfit, idx[misfit==T]); with(judges_misfit, idx[misfit==T] )
## 3_1_CBTL_judge_trait_prior1 ####
img_name = '3_1_CBTL_judge_trait_prior1.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
require(magick)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
## 3_1_CBTL_judge_trait_prior1 ####
img_name = '3_1_CBTL_judge_trait_prior1.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
## 3_1_CBTL_stimuli_trait_prior2 ####
img_name = '3_1_CBTL_stimuli_trait_prior2.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
require(magick)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
## 3_2_CBTL_posterior_confusion ####
img_name = '3_2_CBTL_posterior_confusion.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
## 3_2_CBTL_posterior_stimulus ####
img_name = '3_2_CBTL_posterior_stimulus.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
## 3_2_CBTL_posterior_individual ####
img_name = '3_2_CBTL_posterior_individual.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
img = image_crop( geometry=geometry_area(width=1830, height=1000, x_off=70, y_off=130),
image=img )
image_write( img, path=img_dir )
list.files( path=file.path(dir, 'CBTL_analysis'), full.names=TRUE)
list.files( path=file.path(dir, 'CBTL_analysis','cropped'), full.names=TRUE)
list.files( path=file.path(dir, 'CBTL_analysis','cropped'), full.names=TRUE)
list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=F)
filenames = list.files( path=file.path(dir, 'CBTL_analysis', 'cropped'), full.names=T)
filenames
# manual
img_name = '3_2_CBTL_judges_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
image_info(img)
# preliminar ####
rm(list=ls()); gc(); old_par=par()
## packages ####
# linux: sudo apt-get install -y libmagick++-dev
# R: install.packages('magick')
require(magick)
## dir ####
dir = '/home/josema/Desktop/1. Work/1 research/PhD Antwerp/#thesis/paper3/paper3_presentation/figures'
# manual
img_name = '3_2_CBTL_judges_influential.png'
img_dir = file.path(dir, 'CBTL_analysis', img_name)
img = image_read( path=img_dir )
print(img)
